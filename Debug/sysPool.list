
sysPool.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08007d24  08007d24  00008d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e6c  08007e6c  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007e6c  08007e6c  00008e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e74  08007e74  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e78  08007e78  00008e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007e7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f24  20000014  08007e90  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f38  08007e90  00009f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f4b  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d0  00000000  00000000  00020f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00024060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ea  00000000  00000000  00025750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029721  00000000  00000000  0002693a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019483  00000000  00000000  0005005b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010da73  00000000  00000000  000694de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176f51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006300  00000000  00000000  00176f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017d294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d0c 	.word	0x08007d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007d0c 	.word	0x08007d0c

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	@ 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <__aeabi_uldivmod>:
 800083c:	b953      	cbnz	r3, 8000854 <__aeabi_uldivmod+0x18>
 800083e:	b94a      	cbnz	r2, 8000854 <__aeabi_uldivmod+0x18>
 8000840:	2900      	cmp	r1, #0
 8000842:	bf08      	it	eq
 8000844:	2800      	cmpeq	r0, #0
 8000846:	bf1c      	itt	ne
 8000848:	f04f 31ff 	movne.w	r1, #4294967295
 800084c:	f04f 30ff 	movne.w	r0, #4294967295
 8000850:	f000 b96a 	b.w	8000b28 <__aeabi_idiv0>
 8000854:	f1ad 0c08 	sub.w	ip, sp, #8
 8000858:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800085c:	f000 f806 	bl	800086c <__udivmoddi4>
 8000860:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000868:	b004      	add	sp, #16
 800086a:	4770      	bx	lr

0800086c <__udivmoddi4>:
 800086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000870:	9d08      	ldr	r5, [sp, #32]
 8000872:	460c      	mov	r4, r1
 8000874:	2b00      	cmp	r3, #0
 8000876:	d14e      	bne.n	8000916 <__udivmoddi4+0xaa>
 8000878:	4694      	mov	ip, r2
 800087a:	458c      	cmp	ip, r1
 800087c:	4686      	mov	lr, r0
 800087e:	fab2 f282 	clz	r2, r2
 8000882:	d962      	bls.n	800094a <__udivmoddi4+0xde>
 8000884:	b14a      	cbz	r2, 800089a <__udivmoddi4+0x2e>
 8000886:	f1c2 0320 	rsb	r3, r2, #32
 800088a:	4091      	lsls	r1, r2
 800088c:	fa20 f303 	lsr.w	r3, r0, r3
 8000890:	fa0c fc02 	lsl.w	ip, ip, r2
 8000894:	4319      	orrs	r1, r3
 8000896:	fa00 fe02 	lsl.w	lr, r0, r2
 800089a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089e:	fa1f f68c 	uxth.w	r6, ip
 80008a2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008aa:	fb07 1114 	mls	r1, r7, r4, r1
 80008ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b2:	fb04 f106 	mul.w	r1, r4, r6
 80008b6:	4299      	cmp	r1, r3
 80008b8:	d90a      	bls.n	80008d0 <__udivmoddi4+0x64>
 80008ba:	eb1c 0303 	adds.w	r3, ip, r3
 80008be:	f104 30ff 	add.w	r0, r4, #4294967295
 80008c2:	f080 8112 	bcs.w	8000aea <__udivmoddi4+0x27e>
 80008c6:	4299      	cmp	r1, r3
 80008c8:	f240 810f 	bls.w	8000aea <__udivmoddi4+0x27e>
 80008cc:	3c02      	subs	r4, #2
 80008ce:	4463      	add	r3, ip
 80008d0:	1a59      	subs	r1, r3, r1
 80008d2:	fa1f f38e 	uxth.w	r3, lr
 80008d6:	fbb1 f0f7 	udiv	r0, r1, r7
 80008da:	fb07 1110 	mls	r1, r7, r0, r1
 80008de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e2:	fb00 f606 	mul.w	r6, r0, r6
 80008e6:	429e      	cmp	r6, r3
 80008e8:	d90a      	bls.n	8000900 <__udivmoddi4+0x94>
 80008ea:	eb1c 0303 	adds.w	r3, ip, r3
 80008ee:	f100 31ff 	add.w	r1, r0, #4294967295
 80008f2:	f080 80fc 	bcs.w	8000aee <__udivmoddi4+0x282>
 80008f6:	429e      	cmp	r6, r3
 80008f8:	f240 80f9 	bls.w	8000aee <__udivmoddi4+0x282>
 80008fc:	4463      	add	r3, ip
 80008fe:	3802      	subs	r0, #2
 8000900:	1b9b      	subs	r3, r3, r6
 8000902:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000906:	2100      	movs	r1, #0
 8000908:	b11d      	cbz	r5, 8000912 <__udivmoddi4+0xa6>
 800090a:	40d3      	lsrs	r3, r2
 800090c:	2200      	movs	r2, #0
 800090e:	e9c5 3200 	strd	r3, r2, [r5]
 8000912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000916:	428b      	cmp	r3, r1
 8000918:	d905      	bls.n	8000926 <__udivmoddi4+0xba>
 800091a:	b10d      	cbz	r5, 8000920 <__udivmoddi4+0xb4>
 800091c:	e9c5 0100 	strd	r0, r1, [r5]
 8000920:	2100      	movs	r1, #0
 8000922:	4608      	mov	r0, r1
 8000924:	e7f5      	b.n	8000912 <__udivmoddi4+0xa6>
 8000926:	fab3 f183 	clz	r1, r3
 800092a:	2900      	cmp	r1, #0
 800092c:	d146      	bne.n	80009bc <__udivmoddi4+0x150>
 800092e:	42a3      	cmp	r3, r4
 8000930:	d302      	bcc.n	8000938 <__udivmoddi4+0xcc>
 8000932:	4290      	cmp	r0, r2
 8000934:	f0c0 80f0 	bcc.w	8000b18 <__udivmoddi4+0x2ac>
 8000938:	1a86      	subs	r6, r0, r2
 800093a:	eb64 0303 	sbc.w	r3, r4, r3
 800093e:	2001      	movs	r0, #1
 8000940:	2d00      	cmp	r5, #0
 8000942:	d0e6      	beq.n	8000912 <__udivmoddi4+0xa6>
 8000944:	e9c5 6300 	strd	r6, r3, [r5]
 8000948:	e7e3      	b.n	8000912 <__udivmoddi4+0xa6>
 800094a:	2a00      	cmp	r2, #0
 800094c:	f040 8090 	bne.w	8000a70 <__udivmoddi4+0x204>
 8000950:	eba1 040c 	sub.w	r4, r1, ip
 8000954:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	2101      	movs	r1, #1
 800095e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000962:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000966:	fb08 4416 	mls	r4, r8, r6, r4
 800096a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096e:	fb07 f006 	mul.w	r0, r7, r6
 8000972:	4298      	cmp	r0, r3
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x11c>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f106 34ff 	add.w	r4, r6, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x11a>
 8000980:	4298      	cmp	r0, r3
 8000982:	f200 80cd 	bhi.w	8000b20 <__udivmoddi4+0x2b4>
 8000986:	4626      	mov	r6, r4
 8000988:	1a1c      	subs	r4, r3, r0
 800098a:	fa1f f38e 	uxth.w	r3, lr
 800098e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000992:	fb08 4410 	mls	r4, r8, r0, r4
 8000996:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800099a:	fb00 f707 	mul.w	r7, r0, r7
 800099e:	429f      	cmp	r7, r3
 80009a0:	d908      	bls.n	80009b4 <__udivmoddi4+0x148>
 80009a2:	eb1c 0303 	adds.w	r3, ip, r3
 80009a6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009aa:	d202      	bcs.n	80009b2 <__udivmoddi4+0x146>
 80009ac:	429f      	cmp	r7, r3
 80009ae:	f200 80b0 	bhi.w	8000b12 <__udivmoddi4+0x2a6>
 80009b2:	4620      	mov	r0, r4
 80009b4:	1bdb      	subs	r3, r3, r7
 80009b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ba:	e7a5      	b.n	8000908 <__udivmoddi4+0x9c>
 80009bc:	f1c1 0620 	rsb	r6, r1, #32
 80009c0:	408b      	lsls	r3, r1
 80009c2:	fa22 f706 	lsr.w	r7, r2, r6
 80009c6:	431f      	orrs	r7, r3
 80009c8:	fa20 fc06 	lsr.w	ip, r0, r6
 80009cc:	fa04 f301 	lsl.w	r3, r4, r1
 80009d0:	ea43 030c 	orr.w	r3, r3, ip
 80009d4:	40f4      	lsrs	r4, r6
 80009d6:	fa00 f801 	lsl.w	r8, r0, r1
 80009da:	0c38      	lsrs	r0, r7, #16
 80009dc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009e0:	fbb4 fef0 	udiv	lr, r4, r0
 80009e4:	fa1f fc87 	uxth.w	ip, r7
 80009e8:	fb00 441e 	mls	r4, r0, lr, r4
 80009ec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009f0:	fb0e f90c 	mul.w	r9, lr, ip
 80009f4:	45a1      	cmp	r9, r4
 80009f6:	fa02 f201 	lsl.w	r2, r2, r1
 80009fa:	d90a      	bls.n	8000a12 <__udivmoddi4+0x1a6>
 80009fc:	193c      	adds	r4, r7, r4
 80009fe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a02:	f080 8084 	bcs.w	8000b0e <__udivmoddi4+0x2a2>
 8000a06:	45a1      	cmp	r9, r4
 8000a08:	f240 8081 	bls.w	8000b0e <__udivmoddi4+0x2a2>
 8000a0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a10:	443c      	add	r4, r7
 8000a12:	eba4 0409 	sub.w	r4, r4, r9
 8000a16:	fa1f f983 	uxth.w	r9, r3
 8000a1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a2a:	45a4      	cmp	ip, r4
 8000a2c:	d907      	bls.n	8000a3e <__udivmoddi4+0x1d2>
 8000a2e:	193c      	adds	r4, r7, r4
 8000a30:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a34:	d267      	bcs.n	8000b06 <__udivmoddi4+0x29a>
 8000a36:	45a4      	cmp	ip, r4
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0x29a>
 8000a3a:	3b02      	subs	r3, #2
 8000a3c:	443c      	add	r4, r7
 8000a3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a42:	fba0 9302 	umull	r9, r3, r0, r2
 8000a46:	eba4 040c 	sub.w	r4, r4, ip
 8000a4a:	429c      	cmp	r4, r3
 8000a4c:	46ce      	mov	lr, r9
 8000a4e:	469c      	mov	ip, r3
 8000a50:	d351      	bcc.n	8000af6 <__udivmoddi4+0x28a>
 8000a52:	d04e      	beq.n	8000af2 <__udivmoddi4+0x286>
 8000a54:	b155      	cbz	r5, 8000a6c <__udivmoddi4+0x200>
 8000a56:	ebb8 030e 	subs.w	r3, r8, lr
 8000a5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a62:	40cb      	lsrs	r3, r1
 8000a64:	431e      	orrs	r6, r3
 8000a66:	40cc      	lsrs	r4, r1
 8000a68:	e9c5 6400 	strd	r6, r4, [r5]
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	e750      	b.n	8000912 <__udivmoddi4+0xa6>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f103 	lsr.w	r1, r0, r3
 8000a78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a80:	4094      	lsls	r4, r2
 8000a82:	430c      	orrs	r4, r1
 8000a84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a8c:	fa1f f78c 	uxth.w	r7, ip
 8000a90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a94:	fb08 3110 	mls	r1, r8, r0, r3
 8000a98:	0c23      	lsrs	r3, r4, #16
 8000a9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9e:	fb00 f107 	mul.w	r1, r0, r7
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	d908      	bls.n	8000ab8 <__udivmoddi4+0x24c>
 8000aa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aaa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aae:	d22c      	bcs.n	8000b0a <__udivmoddi4+0x29e>
 8000ab0:	4299      	cmp	r1, r3
 8000ab2:	d92a      	bls.n	8000b0a <__udivmoddi4+0x29e>
 8000ab4:	3802      	subs	r0, #2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b2a4      	uxth	r4, r4
 8000abc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ac0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac8:	fb01 f307 	mul.w	r3, r1, r7
 8000acc:	42a3      	cmp	r3, r4
 8000ace:	d908      	bls.n	8000ae2 <__udivmoddi4+0x276>
 8000ad0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad8:	d213      	bcs.n	8000b02 <__udivmoddi4+0x296>
 8000ada:	42a3      	cmp	r3, r4
 8000adc:	d911      	bls.n	8000b02 <__udivmoddi4+0x296>
 8000ade:	3902      	subs	r1, #2
 8000ae0:	4464      	add	r4, ip
 8000ae2:	1ae4      	subs	r4, r4, r3
 8000ae4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae8:	e739      	b.n	800095e <__udivmoddi4+0xf2>
 8000aea:	4604      	mov	r4, r0
 8000aec:	e6f0      	b.n	80008d0 <__udivmoddi4+0x64>
 8000aee:	4608      	mov	r0, r1
 8000af0:	e706      	b.n	8000900 <__udivmoddi4+0x94>
 8000af2:	45c8      	cmp	r8, r9
 8000af4:	d2ae      	bcs.n	8000a54 <__udivmoddi4+0x1e8>
 8000af6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000afa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afe:	3801      	subs	r0, #1
 8000b00:	e7a8      	b.n	8000a54 <__udivmoddi4+0x1e8>
 8000b02:	4631      	mov	r1, r6
 8000b04:	e7ed      	b.n	8000ae2 <__udivmoddi4+0x276>
 8000b06:	4603      	mov	r3, r0
 8000b08:	e799      	b.n	8000a3e <__udivmoddi4+0x1d2>
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	e7d4      	b.n	8000ab8 <__udivmoddi4+0x24c>
 8000b0e:	46d6      	mov	lr, sl
 8000b10:	e77f      	b.n	8000a12 <__udivmoddi4+0x1a6>
 8000b12:	4463      	add	r3, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	e74d      	b.n	80009b4 <__udivmoddi4+0x148>
 8000b18:	4606      	mov	r6, r0
 8000b1a:	4623      	mov	r3, r4
 8000b1c:	4608      	mov	r0, r1
 8000b1e:	e70f      	b.n	8000940 <__udivmoddi4+0xd4>
 8000b20:	3e02      	subs	r6, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	e730      	b.n	8000988 <__udivmoddi4+0x11c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <vApplicationGetIdleTaskMemory+0x30>)
 8000b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b4a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	20000030 	.word	0x20000030
 8000b5c:	20000084 	.word	0x20000084

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 fda7 	bl	80016b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f86d 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f000 f9bb 	bl	8000ee8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b72:	f000 f989 	bl	8000e88 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b76:	f000 f8b9 	bl	8000cec <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b7a:	f000 f92d 	bl	8000dd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000b7e:	4826      	ldr	r0, [pc, #152]	@ (8000c18 <main+0xb8>)
 8000b80:	f001 fb82 	bl	8002288 <HAL_ADC_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b84:	2108      	movs	r1, #8
 8000b86:	4825      	ldr	r0, [pc, #148]	@ (8000c1c <main+0xbc>)
 8000b88:	f004 f95c 	bl	8004e44 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000b8c:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <main+0xbc>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2200      	movs	r2, #0
 8000b92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b94:	4b22      	ldr	r3, [pc, #136]	@ (8000c20 <main+0xc0>)
 8000b96:	1d3c      	adds	r4, r7, #4
 8000b98:	461d      	mov	r5, r3
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f005 fe20 	bl	80067f0 <osThreadCreate>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <main+0xc4>)
 8000bb4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* Creating tasks for button, sensor and buzzer */
  xTaskCreate(buttonTaskFcn, "buttonTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9301      	str	r3, [sp, #4]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bc4:	4918      	ldr	r1, [pc, #96]	@ (8000c28 <main+0xc8>)
 8000bc6:	4819      	ldr	r0, [pc, #100]	@ (8000c2c <main+0xcc>)
 8000bc8:	f005 ff86 	bl	8006ad8 <xTaskCreate>
  xTaskCreate(sensorTaskFcn, "sensorTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bda:	4915      	ldr	r1, [pc, #84]	@ (8000c30 <main+0xd0>)
 8000bdc:	4815      	ldr	r0, [pc, #84]	@ (8000c34 <main+0xd4>)
 8000bde:	f005 ff7b 	bl	8006ad8 <xTaskCreate>
  xTaskCreate(potentiometerTaskFcn, "potentiometerTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000be2:	2300      	movs	r3, #0
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	2300      	movs	r3, #0
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	2300      	movs	r3, #0
 8000bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf0:	4911      	ldr	r1, [pc, #68]	@ (8000c38 <main+0xd8>)
 8000bf2:	4812      	ldr	r0, [pc, #72]	@ (8000c3c <main+0xdc>)
 8000bf4:	f005 ff70 	bl	8006ad8 <xTaskCreate>
  xTaskCreate(uartCommandTask, "uartCommandTask", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2300      	movs	r3, #0
 8000c02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c06:	490e      	ldr	r1, [pc, #56]	@ (8000c40 <main+0xe0>)
 8000c08:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <main+0xe4>)
 8000c0a:	f005 ff65 	bl	8006ad8 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c0e:	f005 fde8 	bl	80067e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000c12:	bf00      	nop
 8000c14:	e7fd      	b.n	8000c12 <main+0xb2>
 8000c16:	bf00      	nop
 8000c18:	20000484 	.word	0x20000484
 8000c1c:	200004e8 	.word	0x200004e8
 8000c20:	08007d6c 	.word	0x08007d6c
 8000c24:	200005bc 	.word	0x200005bc
 8000c28:	08007d24 	.word	0x08007d24
 8000c2c:	080010c9 	.word	0x080010c9
 8000c30:	08007d30 	.word	0x08007d30
 8000c34:	080011a1 	.word	0x080011a1
 8000c38:	08007d3c 	.word	0x08007d3c
 8000c3c:	080012e1 	.word	0x080012e1
 8000c40:	08007d50 	.word	0x08007d50
 8000c44:	08001019 	.word	0x08001019

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b096      	sub	sp, #88	@ 0x58
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2244      	movs	r2, #68	@ 0x44
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f007 f82c 	bl	8007cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c6e:	f002 fd7f 	bl	8003770 <HAL_PWREx_ControlVoltageScaling>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c78:	f000 fb74 	bl	8001364 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c86:	2310      	movs	r3, #16
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c96:	230a      	movs	r3, #10
 8000c98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fdb6 	bl	800381c <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cb6:	f000 fb55 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 f97e 	bl	8003fd4 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cde:	f000 fb41 	bl	8001364 <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3758      	adds	r7, #88	@ 0x58
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
 8000d0c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d10:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd0 <MX_ADC1_Init+0xe4>)
 8000d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d14:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d26:	4b29      	ldr	r3, [pc, #164]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d2e:	2204      	movs	r2, #4
 8000d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d32:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d38:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d44:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6e:	4817      	ldr	r0, [pc, #92]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d70:	f000 ff74 	bl	8001c5c <HAL_ADC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d7a:	f000 faf3 	bl	8001364 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000d8a:	f002 f973 	bl	8003074 <HAL_ADCEx_MultiModeConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d94:	f000 fae6 	bl	8001364 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d98:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <MX_ADC1_Init+0xe8>)
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9c:	2306      	movs	r3, #6
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da4:	237f      	movs	r3, #127	@ 0x7f
 8000da6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000da8:	2304      	movs	r3, #4
 8000daa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_ADC1_Init+0xe0>)
 8000db6:	f001 fba3 	bl	8002500 <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000dc0:	f000 fad0 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	@ 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000484 	.word	0x20000484
 8000dd0:	50040000 	.word	0x50040000
 8000dd4:	14f00020 	.word	0x14f00020

08000dd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e06:	224f      	movs	r2, #79	@ 0x4f
 8000e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e12:	22ff      	movs	r2, #255	@ 0xff
 8000e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e22:	4818      	ldr	r0, [pc, #96]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e24:	f003 ffb6 	bl	8004d94 <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e2e:	f000 fa99 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4810      	ldr	r0, [pc, #64]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e42:	f004 fdbb 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e4c:	f000 fa8a 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e50:	2360      	movs	r3, #96	@ 0x60
 8000e52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	2208      	movs	r2, #8
 8000e64:	4619      	mov	r1, r3
 8000e66:	4807      	ldr	r0, [pc, #28]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e68:	f004 f8f2 	bl	8005050 <HAL_TIM_PWM_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e72:	f000 fa77 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e76:	4803      	ldr	r0, [pc, #12]	@ (8000e84 <MX_TIM2_Init+0xac>)
 8000e78:	f000 fb28 	bl	80014cc <HAL_TIM_MspPostInit>

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	@ 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200004e8 	.word	0x200004e8

08000e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000e8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ee4 <MX_USART2_UART_Init+0x5c>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_USART2_UART_Init+0x58>)
 8000ecc:	f004 fdfe 	bl	8005acc <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ed6:	f000 fa45 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000534 	.word	0x20000534
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b43      	ldr	r3, [pc, #268]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f02:	4a42      	ldr	r2, [pc, #264]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0a:	4b40      	ldr	r3, [pc, #256]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	4b3d      	ldr	r3, [pc, #244]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f22:	4b3a      	ldr	r3, [pc, #232]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	4b37      	ldr	r3, [pc, #220]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	4a36      	ldr	r2, [pc, #216]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3a:	4b34      	ldr	r3, [pc, #208]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	4a30      	ldr	r2, [pc, #192]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f52:	4b2e      	ldr	r3, [pc, #184]	@ (800100c <MX_GPIO_Init+0x124>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f68:	f002 fbdc 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2110      	movs	r1, #16
 8000f70:	4827      	ldr	r0, [pc, #156]	@ (8001010 <MX_GPIO_Init+0x128>)
 8000f72:	f002 fbd7 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4821      	ldr	r0, [pc, #132]	@ (8001014 <MX_GPIO_Init+0x12c>)
 8000f8e:	f002 fa07 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000f92:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fae:	f002 f9f7 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f002 f9e9 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fce:	2310      	movs	r3, #16
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480a      	ldr	r0, [pc, #40]	@ (8001010 <MX_GPIO_Init+0x128>)
 8000fe6:	f002 f9db 	bl	80033a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fea:	2320      	movs	r3, #32
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_GPIO_Init+0x128>)
 8000ffe:	f002 f9cf 	bl	80033a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800

08001018 <uartCommandTask>:
/* USER CODE BEGIN 4 */

/* USER CODE BEGIN 4 */

/* Task para lidar com comandos UART */
void uartCommandTask(void *argument) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    uint8_t rxBuffer[1];
    for (;;) {
        if (HAL_UART_Receive(&huart2, rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY) == HAL_OK) {
 8001020:	f107 010c 	add.w	r1, r7, #12
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	2201      	movs	r2, #1
 800102a:	4822      	ldr	r0, [pc, #136]	@ (80010b4 <uartCommandTask+0x9c>)
 800102c:	f004 fe25 	bl	8005c7a <HAL_UART_Receive>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d13a      	bne.n	80010ac <uartCommandTask+0x94>
            char comando = rxBuffer[0];
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	73fb      	strb	r3, [r7, #15]

            switch (comando) {
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b6f      	cmp	r3, #111	@ 0x6f
 800103e:	d009      	beq.n	8001054 <uartCommandTask+0x3c>
 8001040:	2b6f      	cmp	r3, #111	@ 0x6f
 8001042:	dc2b      	bgt.n	800109c <uartCommandTask+0x84>
 8001044:	2b66      	cmp	r3, #102	@ 0x66
 8001046:	d017      	beq.n	8001078 <uartCommandTask+0x60>
 8001048:	2b66      	cmp	r3, #102	@ 0x66
 800104a:	dc27      	bgt.n	800109c <uartCommandTask+0x84>
 800104c:	2b46      	cmp	r3, #70	@ 0x46
 800104e:	d013      	beq.n	8001078 <uartCommandTask+0x60>
 8001050:	2b4f      	cmp	r3, #79	@ 0x4f
 8001052:	d123      	bne.n	800109c <uartCommandTask+0x84>
                case 'O':
                case 'o':
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800105a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105e:	f002 fb61 	bl	8003724 <HAL_GPIO_WritePin>
                    sistemaHabilitado = 1;
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <uartCommandTask+0xa0>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
                    HAL_UART_Transmit(&huart2, (uint8_t *)"LED PA8 ON e Sensor ON\n\r", strlen("LED PA8 ON e Sensor ON\n\r"), HAL_MAX_DELAY);
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	2218      	movs	r2, #24
 800106e:	4913      	ldr	r1, [pc, #76]	@ (80010bc <uartCommandTask+0xa4>)
 8001070:	4810      	ldr	r0, [pc, #64]	@ (80010b4 <uartCommandTask+0x9c>)
 8001072:	f004 fd79 	bl	8005b68 <HAL_UART_Transmit>
                    break;
 8001076:	e019      	b.n	80010ac <uartCommandTask+0x94>

                case 'F':
                case 'f':
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800107e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001082:	f002 fb4f 	bl	8003724 <HAL_GPIO_WritePin>
                    sistemaHabilitado = 0;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <uartCommandTask+0xa0>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
                    HAL_UART_Transmit(&huart2, (uint8_t *)"LED PA8 OFF e Sensor OFF\n\r", strlen("LED PA8 OFF e Sensor OFF\n\r"), HAL_MAX_DELAY);
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	221a      	movs	r2, #26
 8001092:	490b      	ldr	r1, [pc, #44]	@ (80010c0 <uartCommandTask+0xa8>)
 8001094:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <uartCommandTask+0x9c>)
 8001096:	f004 fd67 	bl	8005b68 <HAL_UART_Transmit>
                    break;
 800109a:	e007      	b.n	80010ac <uartCommandTask+0x94>

                default:
                    HAL_UART_Transmit(&huart2, (uint8_t *)"Comando invalido\n\r", strlen("Comando invalido\n\r"), HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	2212      	movs	r2, #18
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <uartCommandTask+0xac>)
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <uartCommandTask+0x9c>)
 80010a6:	f004 fd5f 	bl	8005b68 <HAL_UART_Transmit>
                    break;
 80010aa:	bf00      	nop
            }
        }
        vTaskDelay(100);
 80010ac:	2064      	movs	r0, #100	@ 0x64
 80010ae:	f005 fe4b 	bl	8006d48 <vTaskDelay>
        if (HAL_UART_Receive(&huart2, rxBuffer, sizeof(rxBuffer), HAL_MAX_DELAY) == HAL_OK) {
 80010b2:	e7b5      	b.n	8001020 <uartCommandTask+0x8>
 80010b4:	20000534 	.word	0x20000534
 80010b8:	200005d8 	.word	0x200005d8
 80010bc:	08007d88 	.word	0x08007d88
 80010c0:	08007da4 	.word	0x08007da4
 80010c4:	08007dc0 	.word	0x08007dc0

080010c8 <buttonTaskFcn>:

/* USER CODE END 4 */


/* Task para o botão e LED PA8 */
void buttonTaskFcn(void * argument) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    for(;;) {
        int buttonState1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80010d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d8:	f002 fb0c 	bl	80036f4 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	60fb      	str	r3, [r7, #12]
        if (buttonState1 == 0 && previousButtonState1 == 1) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d142      	bne.n	800116c <buttonTaskFcn+0xa4>
 80010e6:	4b25      	ldr	r3, [pc, #148]	@ (800117c <buttonTaskFcn+0xb4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d13e      	bne.n	800116c <buttonTaskFcn+0xa4>
            ledState1 = !ledState1;
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <buttonTaskFcn+0xb8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <buttonTaskFcn+0xb8>)
 8001100:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ledState1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001102:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <buttonTaskFcn+0xb8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f002 fb03 	bl	8003724 <HAL_GPIO_WritePin>

            if (ledState1) {
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <buttonTaskFcn+0xb8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00a      	beq.n	800113c <buttonTaskFcn+0x74>
                sistemaHabilitado = 1;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <buttonTaskFcn+0xbc>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)"Sistema habilitado manualmente\n\r", strlen("Sistema habilitado manualmente\n\r"), HAL_MAX_DELAY);
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	2220      	movs	r2, #32
 8001132:	4915      	ldr	r1, [pc, #84]	@ (8001188 <buttonTaskFcn+0xc0>)
 8001134:	4815      	ldr	r0, [pc, #84]	@ (800118c <buttonTaskFcn+0xc4>)
 8001136:	f004 fd17 	bl	8005b68 <HAL_UART_Transmit>
 800113a:	e017      	b.n	800116c <buttonTaskFcn+0xa4>
            } else {
                sistemaHabilitado = 0;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <buttonTaskFcn+0xbc>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
                alertaAtivo = 0;
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <buttonTaskFcn+0xc8>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin(GPIOA, LED_PA9, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800114e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001152:	f002 fae7 	bl	8003724 <HAL_GPIO_WritePin>
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <buttonTaskFcn+0xcc>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	63da      	str	r2, [r3, #60]	@ 0x3c
                HAL_UART_Transmit(&huart2, (uint8_t *)"Sistema desabilitado manualmente\n\r", strlen("Sistema desabilitado manualmente\n\r"), HAL_MAX_DELAY);
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2222      	movs	r2, #34	@ 0x22
 8001164:	490c      	ldr	r1, [pc, #48]	@ (8001198 <buttonTaskFcn+0xd0>)
 8001166:	4809      	ldr	r0, [pc, #36]	@ (800118c <buttonTaskFcn+0xc4>)
 8001168:	f004 fcfe 	bl	8005b68 <HAL_UART_Transmit>
            }
        }
        previousButtonState1 = buttonState1;
 800116c:	4a03      	ldr	r2, [pc, #12]	@ (800117c <buttonTaskFcn+0xb4>)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6013      	str	r3, [r2, #0]
        vTaskDelay(100);
 8001172:	2064      	movs	r0, #100	@ 0x64
 8001174:	f005 fde8 	bl	8006d48 <vTaskDelay>
    for(;;) {
 8001178:	e7aa      	b.n	80010d0 <buttonTaskFcn+0x8>
 800117a:	bf00      	nop
 800117c:	20000000 	.word	0x20000000
 8001180:	200005c0 	.word	0x200005c0
 8001184:	200005d8 	.word	0x200005d8
 8001188:	08007dd4 	.word	0x08007dd4
 800118c:	20000534 	.word	0x20000534
 8001190:	200005d4 	.word	0x200005d4
 8001194:	200004e8 	.word	0x200004e8
 8001198:	08007df8 	.word	0x08007df8
 800119c:	00000000 	.word	0x00000000

080011a0 <sensorTaskFcn>:
}



/* Task para o sensor ultrassônico */
void sensorTaskFcn(void * argument) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
    for(;;) {
        if (sistemaHabilitado) {
 80011a8:	4b45      	ldr	r3, [pc, #276]	@ (80012c0 <sensorTaskFcn+0x120>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d071      	beq.n	8001294 <sensorTaskFcn+0xf4>
            if (alertaAtivo) {
 80011b0:	4b44      	ldr	r3, [pc, #272]	@ (80012c4 <sensorTaskFcn+0x124>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01d      	beq.n	80011f4 <sensorTaskFcn+0x54>
                ledState2 = !ledState2;
 80011b8:	4b43      	ldr	r3, [pc, #268]	@ (80012c8 <sensorTaskFcn+0x128>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <sensorTaskFcn+0x128>)
 80011ca:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin(GPIOA, LED_PA9, ledState2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011cc:	4b3e      	ldr	r3, [pc, #248]	@ (80012c8 <sensorTaskFcn+0x128>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e4:	f002 fa9e 	bl	8003724 <HAL_GPIO_WritePin>

                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwmDutyCycle);
 80011e8:	4b38      	ldr	r3, [pc, #224]	@ (80012cc <sensorTaskFcn+0x12c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a38      	ldr	r2, [pc, #224]	@ (80012d0 <sensorTaskFcn+0x130>)
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011f2:	e05d      	b.n	80012b0 <sensorTaskFcn+0x110>
            } else {
                HAL_GPIO_WritePin(GPIOB, TRIGGER_PIN, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2110      	movs	r1, #16
 80011f8:	4836      	ldr	r0, [pc, #216]	@ (80012d4 <sensorTaskFcn+0x134>)
 80011fa:	f002 fa93 	bl	8003724 <HAL_GPIO_WritePin>
                HAL_Delay(2);
 80011fe:	2002      	movs	r0, #2
 8001200:	f000 fad6 	bl	80017b0 <HAL_Delay>
                HAL_GPIO_WritePin(GPIOB, TRIGGER_PIN, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	4832      	ldr	r0, [pc, #200]	@ (80012d4 <sensorTaskFcn+0x134>)
 800120a:	f002 fa8b 	bl	8003724 <HAL_GPIO_WritePin>
                HAL_Delay(10);
 800120e:	200a      	movs	r0, #10
 8001210:	f000 face 	bl	80017b0 <HAL_Delay>
                HAL_GPIO_WritePin(GPIOB, TRIGGER_PIN, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2110      	movs	r1, #16
 8001218:	482e      	ldr	r0, [pc, #184]	@ (80012d4 <sensorTaskFcn+0x134>)
 800121a:	f002 fa83 	bl	8003724 <HAL_GPIO_WritePin>

                while (HAL_GPIO_ReadPin(GPIOB, ECHO_PIN) == GPIO_PIN_RESET);
 800121e:	bf00      	nop
 8001220:	2120      	movs	r1, #32
 8001222:	482c      	ldr	r0, [pc, #176]	@ (80012d4 <sensorTaskFcn+0x134>)
 8001224:	f002 fa66 	bl	80036f4 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f8      	beq.n	8001220 <sensorTaskFcn+0x80>
                uint32_t startTime = HAL_GetTick();
 800122e:	f000 fab3 	bl	8001798 <HAL_GetTick>
 8001232:	60f8      	str	r0, [r7, #12]
                while (HAL_GPIO_ReadPin(GPIOB, ECHO_PIN) == GPIO_PIN_SET);
 8001234:	bf00      	nop
 8001236:	2120      	movs	r1, #32
 8001238:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <sensorTaskFcn+0x134>)
 800123a:	f002 fa5b 	bl	80036f4 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b01      	cmp	r3, #1
 8001242:	d0f8      	beq.n	8001236 <sensorTaskFcn+0x96>
                duration = HAL_GetTick() - startTime;
 8001244:	f000 faa8 	bl	8001798 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <sensorTaskFcn+0x138>)
 8001250:	6013      	str	r3, [r2, #0]

                distInCm = duration * (34300.0 / 2.0);
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <sensorTaskFcn+0x138>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fa26 	bl	80006a8 <__aeabi_ui2d>
 800125c:	a316      	add	r3, pc, #88	@ (adr r3, 80012b8 <sensorTaskFcn+0x118>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7fe ffb5 	bl	80001d0 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fa95 	bl	800079c <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <sensorTaskFcn+0x13c>)
 8001276:	6013      	str	r3, [r2, #0]

                if (distInCm < 5.0) {
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <sensorTaskFcn+0x13c>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	d511      	bpl.n	80012b0 <sensorTaskFcn+0x110>
                    alertaAtivo = 1;
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <sensorTaskFcn+0x124>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e00d      	b.n	80012b0 <sensorTaskFcn+0x110>
                }
            }
        } else {
            alertaAtivo = 0;
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <sensorTaskFcn+0x124>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(GPIOA, LED_PA9, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f002 fa3e 	bl	8003724 <HAL_GPIO_WritePin>
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <sensorTaskFcn+0x12c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        vTaskDelay(100);
 80012b0:	2064      	movs	r0, #100	@ 0x64
 80012b2:	f005 fd49 	bl	8006d48 <vTaskDelay>
        if (sistemaHabilitado) {
 80012b6:	e777      	b.n	80011a8 <sensorTaskFcn+0x8>
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40d0bf80 	.word	0x40d0bf80
 80012c0:	200005d8 	.word	0x200005d8
 80012c4:	200005d4 	.word	0x200005d4
 80012c8:	200005c4 	.word	0x200005c4
 80012cc:	200004e8 	.word	0x200004e8
 80012d0:	200005d0 	.word	0x200005d0
 80012d4:	48000400 	.word	0x48000400
 80012d8:	200005c8 	.word	0x200005c8
 80012dc:	200005dc 	.word	0x200005dc

080012e0 <potentiometerTaskFcn>:
    }
}

/* Task para o potenciômetro (ajustando o PWM para controlar o volume do buzzer) */
void potentiometerTaskFcn(void * argument) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    for(;;) {
        if (sistemaHabilitado) {
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <potentiometerTaskFcn+0x60>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d022      	beq.n	8001336 <potentiometerTaskFcn+0x56>
            HAL_ADC_Start(&hadc1);
 80012f0:	4814      	ldr	r0, [pc, #80]	@ (8001344 <potentiometerTaskFcn+0x64>)
 80012f2:	f000 fe03 	bl	8001efc <HAL_ADC_Start>
            if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80012f6:	f04f 31ff 	mov.w	r1, #4294967295
 80012fa:	4812      	ldr	r0, [pc, #72]	@ (8001344 <potentiometerTaskFcn+0x64>)
 80012fc:	f000 feec 	bl	80020d8 <HAL_ADC_PollForConversion>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <potentiometerTaskFcn+0x32>
                adcValue = HAL_ADC_GetValue(&hadc1);
 8001306:	480f      	ldr	r0, [pc, #60]	@ (8001344 <potentiometerTaskFcn+0x64>)
 8001308:	f001 f8ec 	bl	80024e4 <HAL_ADC_GetValue>
 800130c:	4603      	mov	r3, r0
 800130e:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <potentiometerTaskFcn+0x68>)
 8001310:	6013      	str	r3, [r2, #0]
            }
            HAL_ADC_Stop(&hadc1);
 8001312:	480c      	ldr	r0, [pc, #48]	@ (8001344 <potentiometerTaskFcn+0x64>)
 8001314:	f000 feac 	bl	8002070 <HAL_ADC_Stop>

            pwmDutyCycle = (adcValue * 1000) / 4095;
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <potentiometerTaskFcn+0x68>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001320:	fb03 f202 	mul.w	r2, r3, r2
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <potentiometerTaskFcn+0x6c>)
 8001326:	fba3 1302 	umull	r1, r3, r3, r2
 800132a:	1ad2      	subs	r2, r2, r3
 800132c:	0852      	lsrs	r2, r2, #1
 800132e:	4413      	add	r3, r2
 8001330:	0adb      	lsrs	r3, r3, #11
 8001332:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <potentiometerTaskFcn+0x70>)
 8001334:	6013      	str	r3, [r2, #0]
        }
        vTaskDelay(100);
 8001336:	2064      	movs	r0, #100	@ 0x64
 8001338:	f005 fd06 	bl	8006d48 <vTaskDelay>
        if (sistemaHabilitado) {
 800133c:	e7d4      	b.n	80012e8 <potentiometerTaskFcn+0x8>
 800133e:	bf00      	nop
 8001340:	200005d8 	.word	0x200005d8
 8001344:	20000484 	.word	0x20000484
 8001348:	200005cc 	.word	0x200005cc
 800134c:	00100101 	.word	0x00100101
 8001350:	200005d0 	.word	0x200005d0

08001354 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f005 fa93 	bl	8006888 <osDelay>
 8001362:	e7fb      	b.n	800135c <StartDefaultTask+0x8>

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <Error_Handler+0x8>

08001370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_MspInit+0x4c>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <HAL_MspInit+0x4c>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6613      	str	r3, [r2, #96]	@ 0x60
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_MspInit+0x4c>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_MspInit+0x4c>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <HAL_MspInit+0x4c>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001398:	6593      	str	r3, [r2, #88]	@ 0x58
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_MspInit+0x4c>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	210f      	movs	r1, #15
 80013aa:	f06f 0001 	mvn.w	r0, #1
 80013ae:	f001 ffce 	bl	800334e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0ac      	sub	sp, #176	@ 0xb0
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2288      	movs	r2, #136	@ 0x88
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 fc67 	bl	8007cb4 <memset>
  if(hadc->Instance==ADC1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a27      	ldr	r2, [pc, #156]	@ (8001488 <HAL_ADC_MspInit+0xc8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d147      	bne.n	8001480 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013f4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013f6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80013fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001406:	2308      	movs	r3, #8
 8001408:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800140a:	2307      	movs	r3, #7
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001412:	2302      	movs	r3, #2
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001416:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800141a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fffb 	bl	800441c <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800142c:	f7ff ff9a 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001430:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_ADC_MspInit+0xcc>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001434:	4a15      	ldr	r2, [pc, #84]	@ (800148c <HAL_ADC_MspInit+0xcc>)
 8001436:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800143a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_ADC_MspInit+0xcc>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_ADC_MspInit+0xcc>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <HAL_ADC_MspInit+0xcc>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <HAL_ADC_MspInit+0xcc>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001460:	2301      	movs	r3, #1
 8001462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001466:	230b      	movs	r3, #11
 8001468:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147c:	f001 ff90 	bl	80033a0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001480:	bf00      	nop
 8001482:	37b0      	adds	r7, #176	@ 0xb0
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	50040000 	.word	0x50040000
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a0:	d10b      	bne.n	80014ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_TIM_PWM_MspInit+0x38>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_TIM_PWM_MspInit+0x38>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_TIM_PWM_MspInit+0x38>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ec:	d11c      	bne.n	8001528 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <HAL_TIM_MspPostInit+0x64>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001530 <HAL_TIM_MspPostInit+0x64>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HAL_TIM_MspPostInit+0x64>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800150a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001518:	2301      	movs	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	4804      	ldr	r0, [pc, #16]	@ (8001534 <HAL_TIM_MspPostInit+0x68>)
 8001524:	f001 ff3c 	bl	80033a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	48000400 	.word	0x48000400

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0ac      	sub	sp, #176	@ 0xb0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2288      	movs	r2, #136	@ 0x88
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fbab 	bl	8007cb4 <memset>
  if(huart->Instance==USART2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	@ (80015e8 <HAL_UART_MspInit+0xb0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d13b      	bne.n	80015e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001568:	2302      	movs	r3, #2
 800156a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800156c:	2300      	movs	r3, #0
 800156e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4618      	mov	r0, r3
 8001576:	f002 ff51 	bl	800441c <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001580:	f7ff fef0 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_UART_MspInit+0xb4>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <HAL_UART_MspInit+0xb4>)
 800158a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800158e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <HAL_UART_MspInit+0xb4>)
 8001592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <HAL_UART_MspInit+0xb4>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <HAL_UART_MspInit+0xb4>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a8:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_UART_MspInit+0xb4>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015b4:	230c      	movs	r3, #12
 80015b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015cc:	2307      	movs	r3, #7
 80015ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f001 fee0 	bl	80033a0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015e0:	bf00      	nop
 80015e2:	37b0      	adds	r7, #176	@ 0xb0
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40021000 	.word	0x40021000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <NMI_Handler+0x4>

080015f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <MemManage_Handler+0x4>

08001608 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <UsageFault_Handler+0x4>

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f8a1 	bl	8001770 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800162e:	f005 febb 	bl	80073a8 <xTaskGetSchedulerState>
 8001632:	4603      	mov	r3, r0
 8001634:	2b01      	cmp	r3, #1
 8001636:	d001      	beq.n	800163c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001638:	f006 f8fe 	bl	8007838 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800169c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001668:	f7ff ffea 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <LoopForever+0xe>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	@ (80016b0 <LoopForever+0x16>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001692:	f006 fb17 	bl	8007cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001696:	f7ff fa63 	bl	8000b60 <main>

0800169a <LoopForever>:

LoopForever:
    b LoopForever
 800169a:	e7fe      	b.n	800169a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800169c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80016a8:	08007e7c 	.word	0x08007e7c
  ldr r2, =_sbss
 80016ac:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80016b0:	20002f38 	.word	0x20002f38

080016b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC1_2_IRQHandler>
	...

080016b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c2:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <HAL_Init+0x3c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_Init+0x3c>)
 80016c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ce:	2003      	movs	r0, #3
 80016d0:	f001 fe32 	bl	8003338 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d4:	200f      	movs	r0, #15
 80016d6:	f000 f80f 	bl	80016f8 <HAL_InitTick>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	e001      	b.n	80016ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016e6:	f7ff fe43 	bl	8001370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016ea:	79fb      	ldrb	r3, [r7, #7]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40022000 	.word	0x40022000

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_InitTick+0x6c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d023      	beq.n	8001754 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_InitTick+0x70>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_InitTick+0x6c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f001 fe2f 	bl	8003386 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d809      	bhi.n	8001748 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f001 fe07 	bl	800334e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001740:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_InitTick+0x74>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e007      	b.n	8001758 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	e004      	b.n	8001758 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e001      	b.n	8001758 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000000c 	.word	0x2000000c
 8001768:	20000004 	.word	0x20000004
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000000c 	.word	0x2000000c
 8001794:	200005e0 	.word	0x200005e0

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	200005e0 	.word	0x200005e0

080017b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b8:	f7ff ffee 	bl	8001798 <HAL_GetTick>
 80017bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c8:	d005      	beq.n	80017d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_Delay+0x44>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d6:	bf00      	nop
 80017d8:	f7ff ffde 	bl	8001798 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d8f7      	bhi.n	80017d8 <HAL_Delay+0x28>
  {
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000000c 	.word	0x2000000c

080017f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3360      	adds	r3, #96	@ 0x60
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <LL_ADC_SetOffset+0x44>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	4313      	orrs	r3, r2
 8001890:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	03fff000 	.word	0x03fff000

080018a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3360      	adds	r3, #96	@ 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3360      	adds	r3, #96	@ 0x60
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3330      	adds	r3, #48	@ 0x30
 8001940:	461a      	mov	r2, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	4413      	add	r3, r2
 800194e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	211f      	movs	r1, #31
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0e9b      	lsrs	r3, r3, #26
 8001968:	f003 011f 	and.w	r1, r3, #31
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3314      	adds	r3, #20
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	0e5b      	lsrs	r3, r3, #25
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0d1b      	lsrs	r3, r3, #20
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2107      	movs	r1, #7
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	0d1b      	lsrs	r3, r3, #20
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019d2:	bf00      	nop
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0318 	and.w	r3, r3, #24
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a04:	40d9      	lsrs	r1, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	400b      	ands	r3, r1
 8001a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	0007ffff 	.word	0x0007ffff

08001a28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 031f 	and.w	r3, r3, #31
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6093      	str	r3, [r2, #8]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a98:	d101      	bne.n	8001a9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001abc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ac0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ae8:	d101      	bne.n	8001aee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b38:	f043 0202 	orr.w	r2, r3, #2
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <LL_ADC_IsEnabled+0x18>
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <LL_ADC_IsEnabled+0x1a>
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d101      	bne.n	8001b8a <LL_ADC_IsDisableOngoing+0x18>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <LL_ADC_IsDisableOngoing+0x1a>
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bac:	f043 0204 	orr.w	r2, r3, #4
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bd4:	f043 0210 	orr.w	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d101      	bne.n	8001c00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c22:	f043 0220 	orr.w	r2, r3, #32
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b089      	sub	sp, #36	@ 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e130      	b.n	8001ed8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fb9b 	bl	80013c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fef1 	bl	8001a84 <LL_ADC_IsDeepPowerDownEnabled>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fed7 	bl	8001a60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ff0c 	bl	8001ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d115      	bne.n	8001cee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fef0 	bl	8001aac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ccc:	4b84      	ldr	r3, [pc, #528]	@ (8001ee0 <HAL_ADC_Init+0x284>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	4a84      	ldr	r2, [pc, #528]	@ (8001ee4 <HAL_ADC_Init+0x288>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff feee 	bl	8001ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	f043 0201 	orr.w	r2, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff62 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8001d24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 80c9 	bne.w	8001ec6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 80c5 	bne.w	8001ec6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fefb 	bl	8001b4c <LL_ADC_IsEnabled>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d115      	bne.n	8001d88 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d5c:	4862      	ldr	r0, [pc, #392]	@ (8001ee8 <HAL_ADC_Init+0x28c>)
 8001d5e:	f7ff fef5 	bl	8001b4c <LL_ADC_IsEnabled>
 8001d62:	4604      	mov	r4, r0
 8001d64:	4861      	ldr	r0, [pc, #388]	@ (8001eec <HAL_ADC_Init+0x290>)
 8001d66:	f7ff fef1 	bl	8001b4c <LL_ADC_IsEnabled>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	431c      	orrs	r4, r3
 8001d6e:	4860      	ldr	r0, [pc, #384]	@ (8001ef0 <HAL_ADC_Init+0x294>)
 8001d70:	f7ff feec 	bl	8001b4c <LL_ADC_IsEnabled>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4323      	orrs	r3, r4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4619      	mov	r1, r3
 8001d82:	485c      	ldr	r0, [pc, #368]	@ (8001ef4 <HAL_ADC_Init+0x298>)
 8001d84:	f7ff fd38 	bl	80017f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e5b      	ldrb	r3, [r3, #25]
 8001d8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001da6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d106      	bne.n	8001dc4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	045b      	lsls	r3, r3, #17
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b44      	ldr	r3, [pc, #272]	@ (8001ef8 <HAL_ADC_Init+0x29c>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff1c 	bl	8001c36 <LL_ADC_INJ_IsConversionOngoing>
 8001dfe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d13d      	bne.n	8001e82 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d13a      	bne.n	8001e82 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e10:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e18:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e28:	f023 0302 	bic.w	r3, r3, #2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	69b9      	ldr	r1, [r7, #24]
 8001e32:	430b      	orrs	r3, r1
 8001e34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d118      	bne.n	8001e72 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e62:	430a      	orrs	r2, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	e007      	b.n	8001e82 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10c      	bne.n	8001ea4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e90:	f023 010f 	bic.w	r1, r3, #15
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ea2:	e007      	b.n	8001eb4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 020f 	bic.w	r2, r2, #15
 8001eb2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb8:	f023 0303 	bic.w	r3, r3, #3
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ec4:	e007      	b.n	8001ed6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eca:	f043 0210 	orr.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3724      	adds	r7, #36	@ 0x24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	053e2d63 	.word	0x053e2d63
 8001ee8:	50040000 	.word	0x50040000
 8001eec:	50040100 	.word	0x50040100
 8001ef0:	50040200 	.word	0x50040200
 8001ef4:	50040300 	.word	0x50040300
 8001ef8:	fff0c007 	.word	0xfff0c007

08001efc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f04:	4857      	ldr	r0, [pc, #348]	@ (8002064 <HAL_ADC_Start+0x168>)
 8001f06:	f7ff fd8f 	bl	8001a28 <LL_ADC_GetMultimode>
 8001f0a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fe69 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f040 809c 	bne.w	8002056 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_Start+0x30>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e097      	b.n	800205c <HAL_ADC_Start+0x160>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 ff91 	bl	8002e5c <ADC_Enable>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f040 8083 	bne.w	800204c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a42      	ldr	r2, [pc, #264]	@ (8002068 <HAL_ADC_Start+0x16c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d002      	beq.n	8001f6a <HAL_ADC_Start+0x6e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	e000      	b.n	8001f6c <HAL_ADC_Start+0x70>
 8001f6a:	4b40      	ldr	r3, [pc, #256]	@ (800206c <HAL_ADC_Start+0x170>)
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d002      	beq.n	8001f7a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d105      	bne.n	8001f86 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f92:	d106      	bne.n	8001fa2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	f023 0206 	bic.w	r2, r3, #6
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	221c      	movs	r2, #28
 8001fae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002068 <HAL_ADC_Start+0x16c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d002      	beq.n	8001fc8 <HAL_ADC_Start+0xcc>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e000      	b.n	8001fca <HAL_ADC_Start+0xce>
 8001fc8:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_ADC_Start+0x170>)
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d008      	beq.n	8001fe4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	d002      	beq.n	8001fe4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	d114      	bne.n	800200e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ffa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fdc6 	bl	8001b98 <LL_ADC_REG_StartConversion>
 800200c:	e025      	b.n	800205a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <HAL_ADC_Start+0x16c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d002      	beq.n	800202a <HAL_ADC_Start+0x12e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	e000      	b.n	800202c <HAL_ADC_Start+0x130>
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_ADC_Start+0x170>)
 800202c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00f      	beq.n	800205a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002042:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54
 800204a:	e006      	b.n	800205a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002054:	e001      	b.n	800205a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	50040300 	.word	0x50040300
 8002068:	50040100 	.word	0x50040100
 800206c:	50040000 	.word	0x50040000

08002070 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADC_Stop+0x16>
 8002082:	2302      	movs	r3, #2
 8002084:	e023      	b.n	80020ce <HAL_ADC_Stop+0x5e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800208e:	2103      	movs	r1, #3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fe27 	bl	8002ce4 <ADC_ConversionStop>
 8002096:	4603      	mov	r3, r0
 8002098:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 ff61 	bl	8002f68 <ADC_Disable>
 80020a6:	4603      	mov	r3, r0
 80020a8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020e2:	4866      	ldr	r0, [pc, #408]	@ (800227c <HAL_ADC_PollForConversion+0x1a4>)
 80020e4:	f7ff fca0 	bl	8001a28 <LL_ADC_GetMultimode>
 80020e8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d102      	bne.n	80020f8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020f2:	2308      	movs	r3, #8
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	e02a      	b.n	800214e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b05      	cmp	r3, #5
 8002102:	d002      	beq.n	800210a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b09      	cmp	r3, #9
 8002108:	d111      	bne.n	800212e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	f043 0220 	orr.w	r2, r3, #32
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0a4      	b.n	8002272 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002128:	2304      	movs	r3, #4
 800212a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800212c:	e00f      	b.n	800214e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800212e:	4853      	ldr	r0, [pc, #332]	@ (800227c <HAL_ADC_PollForConversion+0x1a4>)
 8002130:	f7ff fc88 	bl	8001a44 <LL_ADC_GetMultiDMATransfer>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e093      	b.n	8002272 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800214a:	2304      	movs	r3, #4
 800214c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800214e:	f7ff fb23 	bl	8001798 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002154:	e021      	b.n	800219a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d01d      	beq.n	800219a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800215e:	f7ff fb1b 	bl	8001798 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <HAL_ADC_PollForConversion+0x9c>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d112      	bne.n	800219a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10b      	bne.n	800219a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002186:	f043 0204 	orr.w	r2, r3, #4
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e06b      	b.n	8002272 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0d6      	beq.n	8002156 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fba6 	bl	800190a <LL_ADC_REG_IsTriggerSourceSWStart>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7e5b      	ldrb	r3, [r3, #25]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d118      	bne.n	80021fe <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d111      	bne.n	80021fe <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1f      	ldr	r2, [pc, #124]	@ (8002280 <HAL_ADC_PollForConversion+0x1a8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d002      	beq.n	800220e <HAL_ADC_PollForConversion+0x136>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	e000      	b.n	8002210 <HAL_ADC_PollForConversion+0x138>
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_ADC_PollForConversion+0x1ac>)
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4293      	cmp	r3, r2
 8002216:	d008      	beq.n	800222a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d002      	beq.n	800222a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2b09      	cmp	r3, #9
 8002228:	d104      	bne.n	8002234 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e00c      	b.n	800224e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a11      	ldr	r2, [pc, #68]	@ (8002280 <HAL_ADC_PollForConversion+0x1a8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d002      	beq.n	8002244 <HAL_ADC_PollForConversion+0x16c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	e000      	b.n	8002246 <HAL_ADC_PollForConversion+0x16e>
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_ADC_PollForConversion+0x1ac>)
 8002246:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d104      	bne.n	800225e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2208      	movs	r2, #8
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e008      	b.n	8002270 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d103      	bne.n	8002270 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	220c      	movs	r2, #12
 800226e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	50040300 	.word	0x50040300
 8002280:	50040100 	.word	0x50040100
 8002284:	50040000 	.word	0x50040000

08002288 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002290:	4891      	ldr	r0, [pc, #580]	@ (80024d8 <HAL_ADC_Start_IT+0x250>)
 8002292:	f7ff fbc9 	bl	8001a28 <LL_ADC_GetMultimode>
 8002296:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fca3 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 8110 	bne.w	80024ca <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_Start_IT+0x30>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e10b      	b.n	80024d0 <HAL_ADC_Start_IT+0x248>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fdcb 	bl	8002e5c <ADC_Enable>
 80022c6:	4603      	mov	r3, r0
 80022c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 80f7 	bne.w	80024c0 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7c      	ldr	r2, [pc, #496]	@ (80024dc <HAL_ADC_Start_IT+0x254>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d002      	beq.n	80022f6 <HAL_ADC_Start_IT+0x6e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	e000      	b.n	80022f8 <HAL_ADC_Start_IT+0x70>
 80022f6:	4b7a      	ldr	r3, [pc, #488]	@ (80024e0 <HAL_ADC_Start_IT+0x258>)
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d002      	beq.n	8002306 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002316:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002322:	f023 0206 	bic.w	r2, r3, #6
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	659a      	str	r2, [r3, #88]	@ 0x58
 800232a:	e002      	b.n	8002332 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	221c      	movs	r2, #28
 8002338:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 021c 	bic.w	r2, r2, #28
 8002350:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b08      	cmp	r3, #8
 8002358:	d108      	bne.n	800236c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0208 	orr.w	r2, r2, #8
 8002368:	605a      	str	r2, [r3, #4]
          break;
 800236a:	e008      	b.n	800237e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0204 	orr.w	r2, r2, #4
 800237a:	605a      	str	r2, [r3, #4]
          break;
 800237c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0210 	orr.w	r2, r2, #16
 8002394:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a50      	ldr	r2, [pc, #320]	@ (80024dc <HAL_ADC_Start_IT+0x254>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d002      	beq.n	80023a6 <HAL_ADC_Start_IT+0x11e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	e000      	b.n	80023a8 <HAL_ADC_Start_IT+0x120>
 80023a6:	4b4e      	ldr	r3, [pc, #312]	@ (80024e0 <HAL_ADC_Start_IT+0x258>)
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d008      	beq.n	80023c2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d002      	beq.n	80023c2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b09      	cmp	r3, #9
 80023c0:	d13a      	bne.n	8002438 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02d      	beq.n	800242c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d110      	bne.n	800240a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0220 	bic.w	r2, r2, #32
 80023f6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002406:	605a      	str	r2, [r3, #4]
              break;
 8002408:	e010      	b.n	800242c <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002418:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0220 	orr.w	r2, r2, #32
 8002428:	605a      	str	r2, [r3, #4]
              break;
 800242a:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fbb1 	bl	8001b98 <LL_ADC_REG_StartConversion>
 8002436:	e04a      	b.n	80024ce <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a24      	ldr	r2, [pc, #144]	@ (80024dc <HAL_ADC_Start_IT+0x254>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d002      	beq.n	8002454 <HAL_ADC_Start_IT+0x1cc>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	e000      	b.n	8002456 <HAL_ADC_Start_IT+0x1ce>
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <HAL_ADC_Start_IT+0x258>)
 8002456:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d034      	beq.n	80024ce <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002468:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800246c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d110      	bne.n	800249e <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0220 	bic.w	r2, r2, #32
 800248a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800249a:	605a      	str	r2, [r3, #4]
              break;
 800249c:	e017      	b.n	80024ce <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0220 	orr.w	r2, r2, #32
 80024bc:	605a      	str	r2, [r3, #4]
              break;
 80024be:	e006      	b.n	80024ce <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80024c8:	e001      	b.n	80024ce <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	50040300 	.word	0x50040300
 80024dc:	50040100 	.word	0x50040100
 80024e0:	50040000 	.word	0x50040000

080024e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0b6      	sub	sp, #216	@ 0xd8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002510:	2300      	movs	r3, #0
 8002512:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x22>
 800251e:	2302      	movs	r3, #2
 8002520:	e3c9      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x7b6>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fb5a 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 83aa 	bne.w	8002c90 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d824      	bhi.n	8002596 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	3b02      	subs	r3, #2
 8002552:	2b03      	cmp	r3, #3
 8002554:	d81b      	bhi.n	800258e <HAL_ADC_ConfigChannel+0x8e>
 8002556:	a201      	add	r2, pc, #4	@ (adr r2, 800255c <HAL_ADC_ConfigChannel+0x5c>)
 8002558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255c:	0800256d 	.word	0x0800256d
 8002560:	08002575 	.word	0x08002575
 8002564:	0800257d 	.word	0x0800257d
 8002568:	08002585 	.word	0x08002585
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800256c:	230c      	movs	r3, #12
 800256e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002572:	e010      	b.n	8002596 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002574:	2312      	movs	r3, #18
 8002576:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800257a:	e00c      	b.n	8002596 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800257c:	2318      	movs	r3, #24
 800257e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002582:	e008      	b.n	8002596 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002584:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002588:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800258c:	e003      	b.n	8002596 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800258e:	2306      	movs	r3, #6
 8002590:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002594:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80025a4:	f7ff f9c4 	bl	8001930 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fb1b 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 80025b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fb3b 	bl	8001c36 <LL_ADC_INJ_IsConversionOngoing>
 80025c0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f040 81a4 	bne.w	8002916 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 819f 	bne.w	8002916 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f7ff f9cf 	bl	8001988 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d00a      	beq.n	8002622 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6919      	ldr	r1, [r3, #16]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261c:	f7ff f920 	bl	8001860 <LL_ADC_SetOffset>
 8002620:	e179      	b.n	8002916 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff f93d 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <HAL_ADC_ConfigChannel+0x14e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f932 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	e01e      	b.n	800268c <HAL_ADC_ConfigChannel+0x18c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f927 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800266c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002670:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002674:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e004      	b.n	800268a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002680:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1a4>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0e9b      	lsrs	r3, r3, #26
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	e018      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1d6>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80026b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80026c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80026c8:	2320      	movs	r3, #32
 80026ca:	e004      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80026cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d106      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f8f6 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f8da 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x214>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2101      	movs	r1, #1
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f8cf 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	f003 021f 	and.w	r2, r3, #31
 8002712:	e01e      	b.n	8002752 <HAL_ADC_ConfigChannel+0x252>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f8c4 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002732:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800273a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e004      	b.n	8002750 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002746:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_ADC_ConfigChannel+0x26a>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	0e9b      	lsrs	r3, r3, #26
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	e018      	b.n	800279c <HAL_ADC_ConfigChannel+0x29c>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002776:	fa93 f3a3 	rbit	r3, r3
 800277a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800277e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002782:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002786:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e004      	b.n	800279c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002792:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800279c:	429a      	cmp	r2, r3
 800279e:	d106      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2101      	movs	r1, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f893 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2102      	movs	r1, #2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff f877 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10a      	bne.n	80027da <HAL_ADC_ConfigChannel+0x2da>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2102      	movs	r1, #2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f86c 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	f003 021f 	and.w	r2, r3, #31
 80027d8:	e01e      	b.n	8002818 <HAL_ADC_ConfigChannel+0x318>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2102      	movs	r1, #2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff f861 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80027f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e004      	b.n	8002816 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800280c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x330>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	e014      	b.n	800285a <HAL_ADC_ConfigChannel+0x35a>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800283e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002844:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e004      	b.n	800285a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002850:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800285a:	429a      	cmp	r2, r3
 800285c:	d106      	bne.n	800286c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff f834 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2103      	movs	r1, #3
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f818 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x398>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2103      	movs	r1, #3
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff f80d 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	f003 021f 	and.w	r2, r3, #31
 8002896:	e017      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x3c8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2103      	movs	r1, #3
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff f802 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80028b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80028b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e003      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80028be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x3e0>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0e9b      	lsrs	r3, r3, #26
 80028da:	f003 031f 	and.w	r3, r3, #31
 80028de:	e011      	b.n	8002904 <HAL_ADC_ConfigChannel+0x404>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80028ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80028f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80028f8:	2320      	movs	r3, #32
 80028fa:	e003      	b.n	8002904 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80028fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002904:	429a      	cmp	r2, r3
 8002906:	d106      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	2103      	movs	r1, #3
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe ffdf 	bl	80018d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff f916 	bl	8001b4c <LL_ADC_IsEnabled>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 8140 	bne.w	8002ba8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	461a      	mov	r2, r3
 8002936:	f7ff f853 	bl	80019e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	4a8f      	ldr	r2, [pc, #572]	@ (8002b7c <HAL_ADC_ConfigChannel+0x67c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	f040 8131 	bne.w	8002ba8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10b      	bne.n	800296e <HAL_ADC_ConfigChannel+0x46e>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0e9b      	lsrs	r3, r3, #26
 800295c:	3301      	adds	r3, #1
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2b09      	cmp	r3, #9
 8002964:	bf94      	ite	ls
 8002966:	2301      	movls	r3, #1
 8002968:	2300      	movhi	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e019      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x4a2>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800297c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e003      	b.n	8002992 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800298a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b09      	cmp	r3, #9
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d079      	beq.n	8002a9a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x4c2>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	3301      	adds	r3, #1
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029c0:	e015      	b.n	80029ee <HAL_ADC_ConfigChannel+0x4ee>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029d2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80029da:	2320      	movs	r3, #32
 80029dc:	e003      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80029de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	069b      	lsls	r3, r3, #26
 80029ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x50e>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	3301      	adds	r3, #1
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	e017      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x53e>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e003      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2101      	movs	r1, #1
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	ea42 0103 	orr.w	r1, r2, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x564>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	3301      	adds	r3, #1
 8002a56:	f003 021f 	and.w	r2, r3, #31
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	051b      	lsls	r3, r3, #20
 8002a62:	e018      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x596>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e003      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f003 021f 	and.w	r2, r3, #31
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a96:	430b      	orrs	r3, r1
 8002a98:	e081      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x5b6>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0e9b      	lsrs	r3, r3, #26
 8002aac:	3301      	adds	r3, #1
 8002aae:	069b      	lsls	r3, r3, #26
 8002ab0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ab4:	e015      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x5e2>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	069b      	lsls	r3, r3, #26
 8002ade:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x602>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	e017      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x632>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	61bb      	str	r3, [r7, #24]
  return result;
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e003      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	ea42 0103 	orr.w	r1, r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x65e>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f003 021f 	and.w	r2, r3, #31
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	3b1e      	subs	r3, #30
 8002b56:	051b      	lsls	r3, r3, #20
 8002b58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b5c:	e01e      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x69c>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	60fb      	str	r3, [r7, #12]
  return result;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d104      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e006      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x688>
 8002b7a:	bf00      	nop
 8002b7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f003 021f 	and.w	r2, r3, #31
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	3b1e      	subs	r3, #30
 8002b96:	051b      	lsls	r3, r3, #20
 8002b98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f7fe fef0 	bl	8001988 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b44      	ldr	r3, [pc, #272]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d07a      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bb4:	4843      	ldr	r0, [pc, #268]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bb6:	f7fe fe45 	bl	8001844 <LL_ADC_GetCommonPathInternalCh>
 8002bba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a41      	ldr	r2, [pc, #260]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d12c      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d126      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ccc <HAL_ADC_ConfigChannel+0x7cc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0x6e8>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d15d      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4834      	ldr	r0, [pc, #208]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002bf4:	f7fe fe13 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bf8:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	4a36      	ldr	r2, [pc, #216]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f9      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c20:	e040      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2d      	ldr	r2, [pc, #180]	@ (8002cdc <HAL_ADC_ConfigChannel+0x7dc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d118      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d112      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a23      	ldr	r2, [pc, #140]	@ (8002ccc <HAL_ADC_ConfigChannel+0x7cc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_ADC_ConfigChannel+0x74c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a22      	ldr	r2, [pc, #136]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d12d      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c54:	4619      	mov	r1, r3
 8002c56:	481b      	ldr	r0, [pc, #108]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c58:	f7fe fde1 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c5c:	e024      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d120      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11a      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <HAL_ADC_ConfigChannel+0x7cc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d115      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c86:	4619      	mov	r1, r3
 8002c88:	480e      	ldr	r0, [pc, #56]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c8a:	f7fe fdc8 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
 8002c8e:	e00c      	b.n	8002caa <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ca2:	e002      	b.n	8002caa <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca4:	bf00      	nop
 8002ca6:	e000      	b.n	8002caa <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ca8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	37d8      	adds	r7, #216	@ 0xd8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	80080000 	.word	0x80080000
 8002cc4:	50040300 	.word	0x50040300
 8002cc8:	c7520000 	.word	0xc7520000
 8002ccc:	50040000 	.word	0x50040000
 8002cd0:	50040200 	.word	0x50040200
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	053e2d63 	.word	0x053e2d63
 8002cdc:	cb840000 	.word	0xcb840000
 8002ce0:	80000001 	.word	0x80000001

08002ce4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe ff74 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8002d00:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe ff95 	bl	8001c36 <LL_ADC_INJ_IsConversionOngoing>
 8002d0c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8098 	beq.w	8002e4c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02a      	beq.n	8002d80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7e5b      	ldrb	r3, [r3, #25]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d126      	bne.n	8002d80 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7e1b      	ldrb	r3, [r3, #24]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d122      	bne.n	8002d80 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d3e:	e014      	b.n	8002d6a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4a45      	ldr	r2, [pc, #276]	@ (8002e58 <ADC_ConversionStop+0x174>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d90d      	bls.n	8002d64 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f043 0210 	orr.w	r2, r3, #16
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	f043 0201 	orr.w	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e074      	b.n	8002e4e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	d1e3      	bne.n	8002d40 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2240      	movs	r2, #64	@ 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d014      	beq.n	8002db0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe ff2c 	bl	8001be8 <LL_ADC_REG_IsConversionOngoing>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00c      	beq.n	8002db0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fee9 	bl	8001b72 <LL_ADC_IsDisableOngoing>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe ff08 	bl	8001bc0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d014      	beq.n	8002de0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe ff3b 	bl	8001c36 <LL_ADC_INJ_IsConversionOngoing>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00c      	beq.n	8002de0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fe fed1 	bl	8001b72 <LL_ADC_IsDisableOngoing>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d104      	bne.n	8002de0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe ff17 	bl	8001c0e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d005      	beq.n	8002df2 <ADC_ConversionStop+0x10e>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d105      	bne.n	8002df8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002dec:	230c      	movs	r3, #12
 8002dee:	617b      	str	r3, [r7, #20]
        break;
 8002df0:	e005      	b.n	8002dfe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002df2:	2308      	movs	r3, #8
 8002df4:	617b      	str	r3, [r7, #20]
        break;
 8002df6:	e002      	b.n	8002dfe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002df8:	2304      	movs	r3, #4
 8002dfa:	617b      	str	r3, [r7, #20]
        break;
 8002dfc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002dfe:	f7fe fccb 	bl	8001798 <HAL_GetTick>
 8002e02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e04:	e01b      	b.n	8002e3e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e06:	f7fe fcc7 	bl	8001798 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d914      	bls.n	8002e3e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e007      	b.n	8002e4e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1dc      	bne.n	8002e06 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	a33fffff 	.word	0xa33fffff

08002e5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fe6d 	bl	8001b4c <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d169      	bne.n	8002f4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	4b36      	ldr	r3, [pc, #216]	@ (8002f58 <ADC_Enable+0xfc>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	f043 0210 	orr.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e055      	b.n	8002f4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fe28 	bl	8001afc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002eac:	482b      	ldr	r0, [pc, #172]	@ (8002f5c <ADC_Enable+0x100>)
 8002eae:	f7fe fcc9 	bl	8001844 <LL_ADC_GetCommonPathInternalCh>
 8002eb2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ebc:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <ADC_Enable+0x104>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	099b      	lsrs	r3, r3, #6
 8002ec2:	4a28      	ldr	r2, [pc, #160]	@ (8002f64 <ADC_Enable+0x108>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ed6:	e002      	b.n	8002ede <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f9      	bne.n	8002ed8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fc58 	bl	8001798 <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eea:	e028      	b.n	8002f3e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fe2b 	bl	8001b4c <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fdfb 	bl	8001afc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f06:	f7fe fc47 	bl	8001798 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d914      	bls.n	8002f3e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d00d      	beq.n	8002f3e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f26:	f043 0210 	orr.w	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e007      	b.n	8002f4e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d1cf      	bne.n	8002eec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	8000003f 	.word	0x8000003f
 8002f5c:	50040300 	.word	0x50040300
 8002f60:	20000004 	.word	0x20000004
 8002f64:	053e2d63 	.word	0x053e2d63

08002f68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fdfc 	bl	8001b72 <LL_ADC_IsDisableOngoing>
 8002f7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fde3 	bl	8001b4c <LL_ADC_IsEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d047      	beq.n	800301c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d144      	bne.n	800301c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030d 	and.w	r3, r3, #13
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10c      	bne.n	8002fba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fdbd 	bl	8001b24 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fb2:	f7fe fbf1 	bl	8001798 <HAL_GetTick>
 8002fb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fb8:	e029      	b.n	800300e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e023      	b.n	800301e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fd6:	f7fe fbdf 	bl	8001798 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d914      	bls.n	800300e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff6:	f043 0210 	orr.w	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e007      	b.n	800301e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1dc      	bne.n	8002fd6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <LL_ADC_IsEnabled>:
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <LL_ADC_IsEnabled+0x18>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_ADC_IsEnabled+0x1a>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_ADC_REG_IsConversionOngoing>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b04      	cmp	r3, #4
 800305e:	d101      	bne.n	8003064 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b09f      	sub	sp, #124	@ 0x7c
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e093      	b.n	80031ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800309a:	2300      	movs	r3, #0
 800309c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800309e:	2300      	movs	r3, #0
 80030a0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a47      	ldr	r2, [pc, #284]	@ (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d102      	bne.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030ac:	4b46      	ldr	r3, [pc, #280]	@ (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	e001      	b.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e072      	b.n	80031ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ffb8 	bl	800304c <LL_ADC_REG_IsConversionOngoing>
 80030dc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ffb2 	bl	800304c <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d154      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d151      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030f4:	4b35      	ldr	r3, [pc, #212]	@ (80031cc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80030f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d02c      	beq.n	800315a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003112:	035b      	lsls	r3, r3, #13
 8003114:	430b      	orrs	r3, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800311c:	4829      	ldr	r0, [pc, #164]	@ (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800311e:	f7ff ff82 	bl	8003026 <LL_ADC_IsEnabled>
 8003122:	4604      	mov	r4, r0
 8003124:	4828      	ldr	r0, [pc, #160]	@ (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003126:	f7ff ff7e 	bl	8003026 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	431c      	orrs	r4, r3
 800312e:	4828      	ldr	r0, [pc, #160]	@ (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003130:	f7ff ff79 	bl	8003026 <LL_ADC_IsEnabled>
 8003134:	4603      	mov	r3, r0
 8003136:	4323      	orrs	r3, r4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d137      	bne.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800313c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003144:	f023 030f 	bic.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	6811      	ldr	r1, [r2, #0]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	6892      	ldr	r2, [r2, #8]
 8003150:	430a      	orrs	r2, r1
 8003152:	431a      	orrs	r2, r3
 8003154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003156:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003158:	e028      	b.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800315a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003164:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003166:	4817      	ldr	r0, [pc, #92]	@ (80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003168:	f7ff ff5d 	bl	8003026 <LL_ADC_IsEnabled>
 800316c:	4604      	mov	r4, r0
 800316e:	4816      	ldr	r0, [pc, #88]	@ (80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003170:	f7ff ff59 	bl	8003026 <LL_ADC_IsEnabled>
 8003174:	4603      	mov	r3, r0
 8003176:	431c      	orrs	r4, r3
 8003178:	4815      	ldr	r0, [pc, #84]	@ (80031d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800317a:	f7ff ff54 	bl	8003026 <LL_ADC_IsEnabled>
 800317e:	4603      	mov	r3, r0
 8003180:	4323      	orrs	r3, r4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d112      	bne.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800318e:	f023 030f 	bic.w	r3, r3, #15
 8003192:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003194:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003196:	e009      	b.n	80031ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80031aa:	e000      	b.n	80031ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	377c      	adds	r7, #124	@ 0x7c
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	50040000 	.word	0x50040000
 80031c8:	50040100 	.word	0x50040100
 80031cc:	50040300 	.word	0x50040300
 80031d0:	50040200 	.word	0x50040200

080031d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f0:	4013      	ands	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__NVIC_GetPriorityGrouping+0x18>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0307 	and.w	r3, r3, #7
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	6039      	str	r1, [r7, #0]
 8003242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003248:	2b00      	cmp	r3, #0
 800324a:	db0a      	blt.n	8003262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	490c      	ldr	r1, [pc, #48]	@ (8003284 <__NVIC_SetPriority+0x4c>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	440b      	add	r3, r1
 800325c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003260:	e00a      	b.n	8003278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4908      	ldr	r1, [pc, #32]	@ (8003288 <__NVIC_SetPriority+0x50>)
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	3b04      	subs	r3, #4
 8003270:	0112      	lsls	r2, r2, #4
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	440b      	add	r3, r1
 8003276:	761a      	strb	r2, [r3, #24]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e100 	.word	0xe000e100
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	@ 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f1c3 0307 	rsb	r3, r3, #7
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	bf28      	it	cs
 80032aa:	2304      	movcs	r3, #4
 80032ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	3304      	adds	r3, #4
 80032b2:	2b06      	cmp	r3, #6
 80032b4:	d902      	bls.n	80032bc <NVIC_EncodePriority+0x30>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3b03      	subs	r3, #3
 80032ba:	e000      	b.n	80032be <NVIC_EncodePriority+0x32>
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	401a      	ands	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032d4:	f04f 31ff 	mov.w	r1, #4294967295
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa01 f303 	lsl.w	r3, r1, r3
 80032de:	43d9      	mvns	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	4313      	orrs	r3, r2
         );
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	@ 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003304:	d301      	bcc.n	800330a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330a:	4a0a      	ldr	r2, [pc, #40]	@ (8003334 <SysTick_Config+0x40>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003312:	210f      	movs	r1, #15
 8003314:	f04f 30ff 	mov.w	r0, #4294967295
 8003318:	f7ff ff8e 	bl	8003238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <SysTick_Config+0x40>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003322:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <SysTick_Config+0x40>)
 8003324:	2207      	movs	r2, #7
 8003326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	e000e010 	.word	0xe000e010

08003338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff47 	bl	80031d4 <__NVIC_SetPriorityGrouping>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003360:	f7ff ff5c 	bl	800321c <__NVIC_GetPriorityGrouping>
 8003364:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	6978      	ldr	r0, [r7, #20]
 800336c:	f7ff ff8e 	bl	800328c <NVIC_EncodePriority>
 8003370:	4602      	mov	r2, r0
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff5d 	bl	8003238 <__NVIC_SetPriority>
}
 800337e:	bf00      	nop
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffb0 	bl	80032f4 <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ae:	e17f      	b.n	80036b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8171 	beq.w	80036aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d005      	beq.n	80033e0 <HAL_GPIO_Init+0x40>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f003 0303 	and.w	r3, r3, #3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0201 	and.w	r2, r3, #1
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b03      	cmp	r3, #3
 800344c:	d118      	bne.n	8003480 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003454:	2201      	movs	r2, #1
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f003 0201 	and.w	r2, r3, #1
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b03      	cmp	r3, #3
 800348a:	d017      	beq.n	80034bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d123      	bne.n	8003510 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	08da      	lsrs	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3208      	adds	r2, #8
 80034d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	6939      	ldr	r1, [r7, #16]
 800350c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0203 	and.w	r2, r3, #3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80ac 	beq.w	80036aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003552:	4b5f      	ldr	r3, [pc, #380]	@ (80036d0 <HAL_GPIO_Init+0x330>)
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	4a5e      	ldr	r2, [pc, #376]	@ (80036d0 <HAL_GPIO_Init+0x330>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6613      	str	r3, [r2, #96]	@ 0x60
 800355e:	4b5c      	ldr	r3, [pc, #368]	@ (80036d0 <HAL_GPIO_Init+0x330>)
 8003560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800356a:	4a5a      	ldr	r2, [pc, #360]	@ (80036d4 <HAL_GPIO_Init+0x334>)
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3302      	adds	r3, #2
 8003572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003576:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	220f      	movs	r2, #15
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003594:	d025      	beq.n	80035e2 <HAL_GPIO_Init+0x242>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4f      	ldr	r2, [pc, #316]	@ (80036d8 <HAL_GPIO_Init+0x338>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <HAL_GPIO_Init+0x23e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4e      	ldr	r2, [pc, #312]	@ (80036dc <HAL_GPIO_Init+0x33c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x23a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4d      	ldr	r2, [pc, #308]	@ (80036e0 <HAL_GPIO_Init+0x340>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x236>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	@ (80036e4 <HAL_GPIO_Init+0x344>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x232>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4b      	ldr	r2, [pc, #300]	@ (80036e8 <HAL_GPIO_Init+0x348>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x22e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4a      	ldr	r2, [pc, #296]	@ (80036ec <HAL_GPIO_Init+0x34c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x22a>
 80035c6:	2306      	movs	r3, #6
 80035c8:	e00c      	b.n	80035e4 <HAL_GPIO_Init+0x244>
 80035ca:	2307      	movs	r3, #7
 80035cc:	e00a      	b.n	80035e4 <HAL_GPIO_Init+0x244>
 80035ce:	2305      	movs	r3, #5
 80035d0:	e008      	b.n	80035e4 <HAL_GPIO_Init+0x244>
 80035d2:	2304      	movs	r3, #4
 80035d4:	e006      	b.n	80035e4 <HAL_GPIO_Init+0x244>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e004      	b.n	80035e4 <HAL_GPIO_Init+0x244>
 80035da:	2302      	movs	r3, #2
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_Init+0x244>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_GPIO_Init+0x244>
 80035e2:	2300      	movs	r3, #0
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	f002 0203 	and.w	r2, r2, #3
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4093      	lsls	r3, r2
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035f4:	4937      	ldr	r1, [pc, #220]	@ (80036d4 <HAL_GPIO_Init+0x334>)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3302      	adds	r3, #2
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003602:	4b3b      	ldr	r3, [pc, #236]	@ (80036f0 <HAL_GPIO_Init+0x350>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	43db      	mvns	r3, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003626:	4a32      	ldr	r2, [pc, #200]	@ (80036f0 <HAL_GPIO_Init+0x350>)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800362c:	4b30      	ldr	r3, [pc, #192]	@ (80036f0 <HAL_GPIO_Init+0x350>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003650:	4a27      	ldr	r2, [pc, #156]	@ (80036f0 <HAL_GPIO_Init+0x350>)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003656:	4b26      	ldr	r3, [pc, #152]	@ (80036f0 <HAL_GPIO_Init+0x350>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800367a:	4a1d      	ldr	r2, [pc, #116]	@ (80036f0 <HAL_GPIO_Init+0x350>)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_GPIO_Init+0x350>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036a4:	4a12      	ldr	r2, [pc, #72]	@ (80036f0 <HAL_GPIO_Init+0x350>)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	3301      	adds	r3, #1
 80036ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f47f ae78 	bne.w	80033b0 <HAL_GPIO_Init+0x10>
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40010000 	.word	0x40010000
 80036d8:	48000400 	.word	0x48000400
 80036dc:	48000800 	.word	0x48000800
 80036e0:	48000c00 	.word	0x48000c00
 80036e4:	48001000 	.word	0x48001000
 80036e8:	48001400 	.word	0x48001400
 80036ec:	48001800 	.word	0x48001800
 80036f0:	40010400 	.word	0x40010400

080036f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e001      	b.n	8003716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003740:	e002      	b.n	8003748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003758:	4b04      	ldr	r3, [pc, #16]	@ (800376c <HAL_PWREx_GetVoltageRange+0x18>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40007000 	.word	0x40007000

08003770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800377e:	d130      	bne.n	80037e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003780:	4b23      	ldr	r3, [pc, #140]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800378c:	d038      	beq.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800378e:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003796:	4a1e      	ldr	r2, [pc, #120]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003798:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800379c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800379e:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2232      	movs	r2, #50	@ 0x32
 80037a4:	fb02 f303 	mul.w	r3, r2, r3
 80037a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003818 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0c9b      	lsrs	r3, r3, #18
 80037b0:	3301      	adds	r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b4:	e002      	b.n	80037bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037bc:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c8:	d102      	bne.n	80037d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f2      	bne.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037dc:	d110      	bne.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e00f      	b.n	8003802 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80037e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ee:	d007      	beq.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037f0:	4b07      	ldr	r3, [pc, #28]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037f8:	4a05      	ldr	r2, [pc, #20]	@ (8003810 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40007000 	.word	0x40007000
 8003814:	20000004 	.word	0x20000004
 8003818:	431bde83 	.word	0x431bde83

0800381c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e3ca      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382e:	4b97      	ldr	r3, [pc, #604]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003838:	4b94      	ldr	r3, [pc, #592]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 80e4 	beq.w	8003a18 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_RCC_OscConfig+0x4a>
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b0c      	cmp	r3, #12
 800385a:	f040 808b 	bne.w	8003974 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2b01      	cmp	r3, #1
 8003862:	f040 8087 	bne.w	8003974 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003866:	4b89      	ldr	r3, [pc, #548]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x62>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e3a2      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	4b82      	ldr	r3, [pc, #520]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <HAL_RCC_OscConfig+0x7c>
 800388e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003896:	e005      	b.n	80038a4 <HAL_RCC_OscConfig+0x88>
 8003898:	4b7c      	ldr	r3, [pc, #496]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d223      	bcs.n	80038f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fd55 	bl	800435c <RCC_SetFlashLatencyFromMSIRange>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e383      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038bc:	4b73      	ldr	r3, [pc, #460]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a72      	ldr	r2, [pc, #456]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038c2:	f043 0308 	orr.w	r3, r3, #8
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b70      	ldr	r3, [pc, #448]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	496d      	ldr	r1, [pc, #436]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038da:	4b6c      	ldr	r3, [pc, #432]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	4968      	ldr	r1, [pc, #416]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
 80038ee:	e025      	b.n	800393c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f0:	4b66      	ldr	r3, [pc, #408]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038f6:	f043 0308 	orr.w	r3, r3, #8
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b63      	ldr	r3, [pc, #396]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4960      	ldr	r1, [pc, #384]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800390e:	4b5f      	ldr	r3, [pc, #380]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	495b      	ldr	r1, [pc, #364]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fd15 	bl	800435c <RCC_SetFlashLatencyFromMSIRange>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e343      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800393c:	f000 fc4a 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b52      	ldr	r3, [pc, #328]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	4950      	ldr	r1, [pc, #320]	@ (8003a90 <HAL_RCC_OscConfig+0x274>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	4a4e      	ldr	r2, [pc, #312]	@ (8003a94 <HAL_RCC_OscConfig+0x278>)
 800395a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800395c:	4b4e      	ldr	r3, [pc, #312]	@ (8003a98 <HAL_RCC_OscConfig+0x27c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd fec9 	bl	80016f8 <HAL_InitTick>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d052      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	e327      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d032      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800397c:	4b43      	ldr	r3, [pc, #268]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a42      	ldr	r2, [pc, #264]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003988:	f7fd ff06 	bl	8001798 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003990:	f7fd ff02 	bl	8001798 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e310      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039a2:	4b3a      	ldr	r3, [pc, #232]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ae:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a36      	ldr	r2, [pc, #216]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4931      	ldr	r1, [pc, #196]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039cc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	492c      	ldr	r1, [pc, #176]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	e01a      	b.n	8003a18 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039e2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a29      	ldr	r2, [pc, #164]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ee:	f7fd fed3 	bl	8001798 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f6:	f7fd fecf 	bl	8001798 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e2dd      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a08:	4b20      	ldr	r3, [pc, #128]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f0      	bne.n	80039f6 <HAL_RCC_OscConfig+0x1da>
 8003a14:	e000      	b.n	8003a18 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a16:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d074      	beq.n	8003b0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d005      	beq.n	8003a36 <HAL_RCC_OscConfig+0x21a>
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d10e      	bne.n	8003a4e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d10b      	bne.n	8003a4e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a36:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d064      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d160      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e2ba      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x24a>
 8003a58:	4b0c      	ldr	r3, [pc, #48]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	e026      	b.n	8003ab4 <HAL_RCC_OscConfig+0x298>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a6e:	d115      	bne.n	8003a9c <HAL_RCC_OscConfig+0x280>
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a05      	ldr	r2, [pc, #20]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a02      	ldr	r2, [pc, #8]	@ (8003a8c <HAL_RCC_OscConfig+0x270>)
 8003a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	e014      	b.n	8003ab4 <HAL_RCC_OscConfig+0x298>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	08007e24 	.word	0x08007e24
 8003a94:	20000004 	.word	0x20000004
 8003a98:	20000008 	.word	0x20000008
 8003a9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a9f      	ldr	r2, [pc, #636]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b9d      	ldr	r3, [pc, #628]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a9c      	ldr	r2, [pc, #624]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d013      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fe6c 	bl	8001798 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7fd fe68 	bl	8001798 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	@ 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e276      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad6:	4b92      	ldr	r3, [pc, #584]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x2a8>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fd fe58 	bl	8001798 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fd fe54 	bl	8001798 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	@ 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e262      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003afe:	4b88      	ldr	r3, [pc, #544]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x2d0>
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d060      	beq.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_OscConfig+0x310>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d119      	bne.n	8003b5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d116      	bne.n	8003b5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_OscConfig+0x328>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e23f      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b44:	4b76      	ldr	r3, [pc, #472]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	4973      	ldr	r1, [pc, #460]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b58:	e040      	b.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d023      	beq.n	8003baa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b62:	4b6f      	ldr	r3, [pc, #444]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6e      	ldr	r2, [pc, #440]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fd fe13 	bl	8001798 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b76:	f7fd fe0f 	bl	8001798 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e21d      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b88:	4b65      	ldr	r3, [pc, #404]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b94:	4b62      	ldr	r3, [pc, #392]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	495f      	ldr	r1, [pc, #380]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
 8003ba8:	e018      	b.n	8003bdc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003baa:	4b5d      	ldr	r3, [pc, #372]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a5c      	ldr	r2, [pc, #368]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb6:	f7fd fdef 	bl	8001798 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbe:	f7fd fdeb 	bl	8001798 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e1f9      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd0:	4b53      	ldr	r3, [pc, #332]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f0      	bne.n	8003bbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d03c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01c      	beq.n	8003c2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd fdca 	bl	8001798 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fd fdc6 	bl	8001798 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1d4      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c1a:	4b41      	ldr	r3, [pc, #260]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ef      	beq.n	8003c08 <HAL_RCC_OscConfig+0x3ec>
 8003c28:	e01b      	b.n	8003c62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c30:	4a3b      	ldr	r2, [pc, #236]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7fd fdad 	bl	8001798 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c42:	f7fd fda9 	bl	8001798 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1b7      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c54:	4b32      	ldr	r3, [pc, #200]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ef      	bne.n	8003c42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a6 	beq.w	8003dbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c70:	2300      	movs	r3, #0
 8003c72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c74:	4b2a      	ldr	r3, [pc, #168]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10d      	bne.n	8003c9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	4b27      	ldr	r3, [pc, #156]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c84:	4a26      	ldr	r2, [pc, #152]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c8c:	4b24      	ldr	r3, [pc, #144]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9c:	4b21      	ldr	r3, [pc, #132]	@ (8003d24 <HAL_RCC_OscConfig+0x508>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d118      	bne.n	8003cda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d24 <HAL_RCC_OscConfig+0x508>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <HAL_RCC_OscConfig+0x508>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb4:	f7fd fd70 	bl	8001798 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fd fd6c 	bl	8001798 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e17a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cce:	4b15      	ldr	r3, [pc, #84]	@ (8003d24 <HAL_RCC_OscConfig+0x508>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d108      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x4d8>
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cf2:	e029      	b.n	8003d48 <HAL_RCC_OscConfig+0x52c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d115      	bne.n	8003d28 <HAL_RCC_OscConfig+0x50c>
 8003cfc:	4b08      	ldr	r3, [pc, #32]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	4a07      	ldr	r2, [pc, #28]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d0c:	4b04      	ldr	r3, [pc, #16]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	4a03      	ldr	r2, [pc, #12]	@ (8003d20 <HAL_RCC_OscConfig+0x504>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d1c:	e014      	b.n	8003d48 <HAL_RCC_OscConfig+0x52c>
 8003d1e:	bf00      	nop
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
 8003d28:	4b9c      	ldr	r3, [pc, #624]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2e:	4a9b      	ldr	r2, [pc, #620]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d38:	4b98      	ldr	r3, [pc, #608]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	4a97      	ldr	r2, [pc, #604]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003d40:	f023 0304 	bic.w	r3, r3, #4
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d016      	beq.n	8003d7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7fd fd22 	bl	8001798 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fd fd1e 	bl	8001798 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e12a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d6e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ed      	beq.n	8003d58 <HAL_RCC_OscConfig+0x53c>
 8003d7c:	e015      	b.n	8003daa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fd fd0b 	bl	8001798 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd fd07 	bl	8001798 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e113      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ed      	bne.n	8003d86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db0:	4b7a      	ldr	r3, [pc, #488]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	4a79      	ldr	r2, [pc, #484]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80fe 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	f040 80d0 	bne.w	8003f70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dd0:	4b72      	ldr	r3, [pc, #456]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 0203 	and.w	r2, r3, #3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d130      	bne.n	8003e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	3b01      	subs	r3, #1
 8003df0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d127      	bne.n	8003e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11f      	bne.n	8003e46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e10:	2a07      	cmp	r2, #7
 8003e12:	bf14      	ite	ne
 8003e14:	2201      	movne	r2, #1
 8003e16:	2200      	moveq	r2, #0
 8003e18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d113      	bne.n	8003e46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d109      	bne.n	8003e46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d06e      	beq.n	8003f24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d069      	beq.n	8003f20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e4c:	4b53      	ldr	r3, [pc, #332]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d105      	bne.n	8003e64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e58:	4b50      	ldr	r3, [pc, #320]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0ad      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e68:	4b4c      	ldr	r3, [pc, #304]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e74:	f7fd fc90 	bl	8001798 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd fc8c 	bl	8001798 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e09a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8e:	4b43      	ldr	r3, [pc, #268]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e9a:	4b40      	ldr	r3, [pc, #256]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	4b40      	ldr	r3, [pc, #256]	@ (8003fa0 <HAL_RCC_OscConfig+0x784>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003eaa:	3a01      	subs	r2, #1
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	4311      	orrs	r1, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003eb4:	0212      	lsls	r2, r2, #8
 8003eb6:	4311      	orrs	r1, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ebc:	0852      	lsrs	r2, r2, #1
 8003ebe:	3a01      	subs	r2, #1
 8003ec0:	0552      	lsls	r2, r2, #21
 8003ec2:	4311      	orrs	r1, r2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ec8:	0852      	lsrs	r2, r2, #1
 8003eca:	3a01      	subs	r2, #1
 8003ecc:	0652      	lsls	r2, r2, #25
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ed4:	0912      	lsrs	r2, r2, #4
 8003ed6:	0452      	lsls	r2, r2, #17
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	4930      	ldr	r1, [pc, #192]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003eea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eec:	4b2b      	ldr	r3, [pc, #172]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ef6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ef8:	f7fd fc4e 	bl	8001798 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fd fc4a 	bl	8001798 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e058      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	4b22      	ldr	r3, [pc, #136]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f1e:	e050      	b.n	8003fc2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e04f      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f24:	4b1d      	ldr	r3, [pc, #116]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d148      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f30:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a19      	ldr	r2, [pc, #100]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f3c:	4b17      	ldr	r3, [pc, #92]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a16      	ldr	r2, [pc, #88]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f48:	f7fd fc26 	bl	8001798 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fc22 	bl	8001798 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e030      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x734>
 8003f6e:	e028      	b.n	8003fc2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d023      	beq.n	8003fbe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f76:	4b09      	ldr	r3, [pc, #36]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a08      	ldr	r2, [pc, #32]	@ (8003f9c <HAL_RCC_OscConfig+0x780>)
 8003f7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fd fc09 	bl	8001798 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f88:	e00c      	b.n	8003fa4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fd fc05 	bl	8001798 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d905      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e013      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa4:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <HAL_RCC_OscConfig+0x7b0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ec      	bne.n	8003f8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003fb0:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <HAL_RCC_OscConfig+0x7b0>)
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4905      	ldr	r1, [pc, #20]	@ (8003fcc <HAL_RCC_OscConfig+0x7b0>)
 8003fb6:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <HAL_RCC_OscConfig+0x7b4>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	60cb      	str	r3, [r1, #12]
 8003fbc:	e001      	b.n	8003fc2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	feeefffc 	.word	0xfeeefffc

08003fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0e7      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b75      	ldr	r3, [pc, #468]	@ (80041c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d910      	bls.n	8004018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b72      	ldr	r3, [pc, #456]	@ (80041c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 0207 	bic.w	r2, r3, #7
 8003ffe:	4970      	ldr	r1, [pc, #448]	@ (80041c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b6e      	ldr	r3, [pc, #440]	@ (80041c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0cf      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d010      	beq.n	8004046 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	4b66      	ldr	r3, [pc, #408]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004030:	429a      	cmp	r2, r3
 8004032:	d908      	bls.n	8004046 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b63      	ldr	r3, [pc, #396]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4960      	ldr	r1, [pc, #384]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d04c      	beq.n	80040ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	4b5a      	ldr	r3, [pc, #360]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d121      	bne.n	80040aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e0a6      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004072:	4b54      	ldr	r3, [pc, #336]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d115      	bne.n	80040aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e09a      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800408a:	4b4e      	ldr	r3, [pc, #312]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e08e      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409a:	4b4a      	ldr	r3, [pc, #296]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e086      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040aa:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4943      	ldr	r1, [pc, #268]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040bc:	f7fd fb6c 	bl	8001798 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	e00a      	b.n	80040da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c4:	f7fd fb68 	bl	8001798 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e06e      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	4b3a      	ldr	r3, [pc, #232]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 020c 	and.w	r2, r3, #12
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1eb      	bne.n	80040c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	4b31      	ldr	r3, [pc, #196]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004104:	429a      	cmp	r2, r3
 8004106:	d208      	bcs.n	800411a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b2e      	ldr	r3, [pc, #184]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	492b      	ldr	r1, [pc, #172]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800411a:	4b29      	ldr	r3, [pc, #164]	@ (80041c0 <HAL_RCC_ClockConfig+0x1ec>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d210      	bcs.n	800414a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004128:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <HAL_RCC_ClockConfig+0x1ec>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f023 0207 	bic.w	r2, r3, #7
 8004130:	4923      	ldr	r1, [pc, #140]	@ (80041c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	4313      	orrs	r3, r2
 8004136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004138:	4b21      	ldr	r3, [pc, #132]	@ (80041c0 <HAL_RCC_ClockConfig+0x1ec>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e036      	b.n	80041b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004156:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4918      	ldr	r1, [pc, #96]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d009      	beq.n	8004188 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004174:	4b13      	ldr	r3, [pc, #76]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4910      	ldr	r1, [pc, #64]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004188:	f000 f824 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	490b      	ldr	r1, [pc, #44]	@ (80041c8 <HAL_RCC_ClockConfig+0x1f4>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	4a09      	ldr	r2, [pc, #36]	@ (80041cc <HAL_RCC_ClockConfig+0x1f8>)
 80041a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041a8:	4b09      	ldr	r3, [pc, #36]	@ (80041d0 <HAL_RCC_ClockConfig+0x1fc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fd faa3 	bl	80016f8 <HAL_InitTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80041b6:	7afb      	ldrb	r3, [r7, #11]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40022000 	.word	0x40022000
 80041c4:	40021000 	.word	0x40021000
 80041c8:	08007e24 	.word	0x08007e24
 80041cc:	20000004 	.word	0x20000004
 80041d0:	20000008 	.word	0x20000008

080041d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b089      	sub	sp, #36	@ 0x24
 80041d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e2:	4b3e      	ldr	r3, [pc, #248]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ec:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x34>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d121      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d11e      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004208:	4b34      	ldr	r3, [pc, #208]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004214:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e005      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004224:	4b2d      	ldr	r3, [pc, #180]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004230:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004238:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10d      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004244:	e00a      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d102      	bne.n	8004252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800424c:	4b25      	ldr	r3, [pc, #148]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	e004      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d101      	bne.n	800425c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004258:	4b23      	ldr	r3, [pc, #140]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800425a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b0c      	cmp	r3, #12
 8004260:	d134      	bne.n	80042cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004262:	4b1e      	ldr	r3, [pc, #120]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d003      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0xa6>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d003      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0xac>
 8004278:	e005      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800427a:	4b1a      	ldr	r3, [pc, #104]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800427c:	617b      	str	r3, [r7, #20]
      break;
 800427e:	e005      	b.n	800428c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004280:	4b19      	ldr	r3, [pc, #100]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004282:	617b      	str	r3, [r7, #20]
      break;
 8004284:	e002      	b.n	800428c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	617b      	str	r3, [r7, #20]
      break;
 800428a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800428c:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	3301      	adds	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800429a:	4b10      	ldr	r3, [pc, #64]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	fb03 f202 	mul.w	r2, r3, r2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042b2:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x108>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	0e5b      	lsrs	r3, r3, #25
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	3301      	adds	r3, #1
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042cc:	69bb      	ldr	r3, [r7, #24]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3724      	adds	r7, #36	@ 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	08007e3c 	.word	0x08007e3c
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	007a1200 	.word	0x007a1200

080042ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f0:	4b03      	ldr	r3, [pc, #12]	@ (8004300 <HAL_RCC_GetHCLKFreq+0x14>)
 80042f2:	681b      	ldr	r3, [r3, #0]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000004 	.word	0x20000004

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004308:	f7ff fff0 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4904      	ldr	r1, [pc, #16]	@ (800432c <HAL_RCC_GetPCLK1Freq+0x28>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021000 	.word	0x40021000
 800432c:	08007e34 	.word	0x08007e34

08004330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004334:	f7ff ffda 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0adb      	lsrs	r3, r3, #11
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4904      	ldr	r1, [pc, #16]	@ (8004358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	08007e34 	.word	0x08007e34

0800435c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004364:	2300      	movs	r3, #0
 8004366:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004368:	4b2a      	ldr	r3, [pc, #168]	@ (8004414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800436a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004374:	f7ff f9ee 	bl	8003754 <HAL_PWREx_GetVoltageRange>
 8004378:	6178      	str	r0, [r7, #20]
 800437a:	e014      	b.n	80043a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800437c:	4b25      	ldr	r3, [pc, #148]	@ (8004414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	4a24      	ldr	r2, [pc, #144]	@ (8004414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004386:	6593      	str	r3, [r2, #88]	@ 0x58
 8004388:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800438a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004394:	f7ff f9de 	bl	8003754 <HAL_PWREx_GetVoltageRange>
 8004398:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800439a:	4b1e      	ldr	r3, [pc, #120]	@ (8004414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439e:	4a1d      	ldr	r2, [pc, #116]	@ (8004414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ac:	d10b      	bne.n	80043c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b80      	cmp	r3, #128	@ 0x80
 80043b2:	d919      	bls.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80043b8:	d902      	bls.n	80043c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ba:	2302      	movs	r3, #2
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	e013      	b.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043c0:	2301      	movs	r3, #1
 80043c2:	613b      	str	r3, [r7, #16]
 80043c4:	e010      	b.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b80      	cmp	r3, #128	@ 0x80
 80043ca:	d902      	bls.n	80043d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043cc:	2303      	movs	r3, #3
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	e00a      	b.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b80      	cmp	r3, #128	@ 0x80
 80043d6:	d102      	bne.n	80043de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043d8:	2302      	movs	r3, #2
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	e004      	b.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b70      	cmp	r3, #112	@ 0x70
 80043e2:	d101      	bne.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043e4:	2301      	movs	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 0207 	bic.w	r2, r3, #7
 80043f0:	4909      	ldr	r1, [pc, #36]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043f8:	4b07      	ldr	r3, [pc, #28]	@ (8004418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	429a      	cmp	r2, r3
 8004404:	d001      	beq.n	800440a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000
 8004418:	40022000 	.word	0x40022000

0800441c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004424:	2300      	movs	r3, #0
 8004426:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004428:	2300      	movs	r3, #0
 800442a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004434:	2b00      	cmp	r3, #0
 8004436:	d041      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800443c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004440:	d02a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004442:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004446:	d824      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004448:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800444c:	d008      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800444e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004452:	d81e      	bhi.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800445c:	d010      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800445e:	e018      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004460:	4b86      	ldr	r3, [pc, #536]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a85      	ldr	r2, [pc, #532]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800446c:	e015      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fabb 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800447e:	e00c      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3320      	adds	r3, #32
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fba6 	bl	8004bd8 <RCCEx_PLLSAI2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004490:	e003      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	74fb      	strb	r3, [r7, #19]
      break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449a:	7cfb      	ldrb	r3, [r7, #19]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10b      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a0:	4b76      	ldr	r3, [pc, #472]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ae:	4973      	ldr	r1, [pc, #460]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044b6:	e001      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d041      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044d0:	d02a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80044d6:	d824      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044dc:	d008      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044e2:	d81e      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ec:	d010      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044ee:	e018      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044f0:	4b62      	ldr	r3, [pc, #392]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a61      	ldr	r2, [pc, #388]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044fc:	e015      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fa73 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800450e:	e00c      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3320      	adds	r3, #32
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fb5e 	bl	8004bd8 <RCCEx_PLLSAI2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	74fb      	strb	r3, [r7, #19]
      break;
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004530:	4b52      	ldr	r3, [pc, #328]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800453e:	494f      	ldr	r1, [pc, #316]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004546:	e001      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80a0 	beq.w	800469a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455a:	2300      	movs	r3, #0
 800455c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800455e:	4b47      	ldr	r3, [pc, #284]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004574:	4b41      	ldr	r3, [pc, #260]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004578:	4a40      	ldr	r2, [pc, #256]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800457e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004580:	4b3e      	ldr	r3, [pc, #248]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800458c:	2301      	movs	r3, #1
 800458e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004590:	4b3b      	ldr	r3, [pc, #236]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3a      	ldr	r2, [pc, #232]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800459c:	f7fd f8fc 	bl	8001798 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045a2:	e009      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a4:	f7fd f8f8 	bl	8001798 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d902      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	74fb      	strb	r3, [r7, #19]
        break;
 80045b6:	e005      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045b8:	4b31      	ldr	r3, [pc, #196]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ef      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d15c      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ca:	4b2c      	ldr	r3, [pc, #176]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01f      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d019      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045e8:	4b24      	ldr	r3, [pc, #144]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045f4:	4b21      	ldr	r3, [pc, #132]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	4a20      	ldr	r2, [pc, #128]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004604:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004614:	4a19      	ldr	r2, [pc, #100]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d016      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fd f8b7 	bl	8001798 <HAL_GetTick>
 800462a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462c:	e00b      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fd f8b3 	bl	8001798 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d902      	bls.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	74fb      	strb	r3, [r7, #19]
            break;
 8004644:	e006      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004646:	4b0d      	ldr	r3, [pc, #52]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ec      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10c      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800465a:	4b08      	ldr	r3, [pc, #32]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800466a:	4904      	ldr	r1, [pc, #16]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004672:	e009      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	74bb      	strb	r3, [r7, #18]
 8004678:	e006      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004688:	7c7b      	ldrb	r3, [r7, #17]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468e:	4b9e      	ldr	r3, [pc, #632]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004692:	4a9d      	ldr	r2, [pc, #628]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004698:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a6:	4b98      	ldr	r3, [pc, #608]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	f023 0203 	bic.w	r2, r3, #3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	4994      	ldr	r1, [pc, #592]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ce:	f023 020c 	bic.w	r2, r3, #12
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d6:	498c      	ldr	r1, [pc, #560]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ea:	4b87      	ldr	r3, [pc, #540]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	4983      	ldr	r1, [pc, #524]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800470c:	4b7e      	ldr	r3, [pc, #504]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004712:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	497b      	ldr	r1, [pc, #492]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800472e:	4b76      	ldr	r3, [pc, #472]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004734:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473c:	4972      	ldr	r1, [pc, #456]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004750:	4b6d      	ldr	r3, [pc, #436]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475e:	496a      	ldr	r1, [pc, #424]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004772:	4b65      	ldr	r3, [pc, #404]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004780:	4961      	ldr	r1, [pc, #388]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004794:	4b5c      	ldr	r3, [pc, #368]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	4959      	ldr	r1, [pc, #356]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b6:	4b54      	ldr	r3, [pc, #336]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c4:	4950      	ldr	r1, [pc, #320]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	4948      	ldr	r1, [pc, #288]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047fa:	4b43      	ldr	r3, [pc, #268]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004800:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004808:	493f      	ldr	r1, [pc, #252]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d028      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800481c:	4b3a      	ldr	r3, [pc, #232]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800482a:	4937      	ldr	r1, [pc, #220]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483a:	d106      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800483c:	4b32      	ldr	r3, [pc, #200]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a31      	ldr	r2, [pc, #196]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004846:	60d3      	str	r3, [r2, #12]
 8004848:	e011      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800484e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004852:	d10c      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f8c8 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800486a:	7cfb      	ldrb	r3, [r7, #19]
 800486c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d028      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800487a:	4b23      	ldr	r3, [pc, #140]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004888:	491f      	ldr	r1, [pc, #124]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004898:	d106      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489a:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	4a1a      	ldr	r2, [pc, #104]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048a4:	60d3      	str	r3, [r2, #12]
 80048a6:	e011      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048b0:	d10c      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	2101      	movs	r1, #1
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f899 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d02b      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e6:	4908      	ldr	r1, [pc, #32]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048f6:	d109      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f8:	4b03      	ldr	r3, [pc, #12]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a02      	ldr	r2, [pc, #8]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004902:	60d3      	str	r3, [r2, #12]
 8004904:	e014      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004910:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004914:	d10c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	2101      	movs	r1, #1
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f867 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d02f      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800493c:	4b2b      	ldr	r3, [pc, #172]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004942:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800494a:	4928      	ldr	r1, [pc, #160]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800495a:	d10d      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	2102      	movs	r1, #2
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f844 	bl	80049f0 <RCCEx_PLLSAI1_Config>
 8004968:	4603      	mov	r3, r0
 800496a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d014      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004972:	7cfb      	ldrb	r3, [r7, #19]
 8004974:	74bb      	strb	r3, [r7, #18]
 8004976:	e011      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800497c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004980:	d10c      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3320      	adds	r3, #32
 8004986:	2102      	movs	r1, #2
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f925 	bl	8004bd8 <RCCEx_PLLSAI2_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049a8:	4b10      	ldr	r3, [pc, #64]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b6:	490d      	ldr	r1, [pc, #52]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ca:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049da:	4904      	ldr	r1, [pc, #16]	@ (80049ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000

080049f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049fe:	4b75      	ldr	r3, [pc, #468]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d018      	beq.n	8004a3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a0a:	4b72      	ldr	r3, [pc, #456]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0203 	and.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d10d      	bne.n	8004a36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a22:	4b6c      	ldr	r3, [pc, #432]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
       ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d047      	beq.n	8004ac6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
 8004a3a:	e044      	b.n	8004ac6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d018      	beq.n	8004a76 <RCCEx_PLLSAI1_Config+0x86>
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d825      	bhi.n	8004a94 <RCCEx_PLLSAI1_Config+0xa4>
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d002      	beq.n	8004a52 <RCCEx_PLLSAI1_Config+0x62>
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d009      	beq.n	8004a64 <RCCEx_PLLSAI1_Config+0x74>
 8004a50:	e020      	b.n	8004a94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a52:	4b60      	ldr	r3, [pc, #384]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11d      	bne.n	8004a9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a62:	e01a      	b.n	8004a9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a64:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d116      	bne.n	8004a9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a74:	e013      	b.n	8004a9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a76:	4b57      	ldr	r3, [pc, #348]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a82:	4b54      	ldr	r3, [pc, #336]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a92:	e006      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      break;
 8004a98:	e004      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10d      	bne.n	8004ac6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6819      	ldr	r1, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	4944      	ldr	r1, [pc, #272]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d17d      	bne.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004acc:	4b41      	ldr	r3, [pc, #260]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a40      	ldr	r2, [pc, #256]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad8:	f7fc fe5e 	bl	8001798 <HAL_GetTick>
 8004adc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ade:	e009      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae0:	f7fc fe5a 	bl	8001798 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d902      	bls.n	8004af4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	73fb      	strb	r3, [r7, #15]
        break;
 8004af2:	e005      	b.n	8004b00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af4:	4b37      	ldr	r3, [pc, #220]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ef      	bne.n	8004ae0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d160      	bne.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d111      	bne.n	8004b30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b0c:	4b31      	ldr	r3, [pc, #196]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6892      	ldr	r2, [r2, #8]
 8004b1c:	0211      	lsls	r1, r2, #8
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68d2      	ldr	r2, [r2, #12]
 8004b22:	0912      	lsrs	r2, r2, #4
 8004b24:	0452      	lsls	r2, r2, #17
 8004b26:	430a      	orrs	r2, r1
 8004b28:	492a      	ldr	r1, [pc, #168]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	610b      	str	r3, [r1, #16]
 8004b2e:	e027      	b.n	8004b80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d112      	bne.n	8004b5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b36:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004b3e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6892      	ldr	r2, [r2, #8]
 8004b46:	0211      	lsls	r1, r2, #8
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6912      	ldr	r2, [r2, #16]
 8004b4c:	0852      	lsrs	r2, r2, #1
 8004b4e:	3a01      	subs	r2, #1
 8004b50:	0552      	lsls	r2, r2, #21
 8004b52:	430a      	orrs	r2, r1
 8004b54:	491f      	ldr	r1, [pc, #124]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	610b      	str	r3, [r1, #16]
 8004b5a:	e011      	b.n	8004b80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6892      	ldr	r2, [r2, #8]
 8004b6c:	0211      	lsls	r1, r2, #8
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6952      	ldr	r2, [r2, #20]
 8004b72:	0852      	lsrs	r2, r2, #1
 8004b74:	3a01      	subs	r2, #1
 8004b76:	0652      	lsls	r2, r2, #25
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	4916      	ldr	r1, [pc, #88]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b80:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8c:	f7fc fe04 	bl	8001798 <HAL_GetTick>
 8004b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b92:	e009      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b94:	f7fc fe00 	bl	8001798 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d902      	bls.n	8004ba8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba6:	e005      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0ef      	beq.n	8004b94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	4904      	ldr	r1, [pc, #16]	@ (8004bd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004be6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004bf2:	4b67      	ldr	r3, [pc, #412]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0203 	and.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d10d      	bne.n	8004c1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
       ||
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c0a:	4b61      	ldr	r3, [pc, #388]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
       ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d047      	beq.n	8004cae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	e044      	b.n	8004cae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d018      	beq.n	8004c5e <RCCEx_PLLSAI2_Config+0x86>
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d825      	bhi.n	8004c7c <RCCEx_PLLSAI2_Config+0xa4>
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d002      	beq.n	8004c3a <RCCEx_PLLSAI2_Config+0x62>
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d009      	beq.n	8004c4c <RCCEx_PLLSAI2_Config+0x74>
 8004c38:	e020      	b.n	8004c7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c3a:	4b55      	ldr	r3, [pc, #340]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d11d      	bne.n	8004c82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4a:	e01a      	b.n	8004c82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c4c:	4b50      	ldr	r3, [pc, #320]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d116      	bne.n	8004c86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c5c:	e013      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c6a:	4b49      	ldr	r3, [pc, #292]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c7a:	e006      	b.n	8004c8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e004      	b.n	8004c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10d      	bne.n	8004cae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c92:	4b3f      	ldr	r3, [pc, #252]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	4939      	ldr	r1, [pc, #228]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d167      	bne.n	8004d84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004cb4:	4b36      	ldr	r3, [pc, #216]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a35      	ldr	r2, [pc, #212]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fc fd6a 	bl	8001798 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cc6:	e009      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cc8:	f7fc fd66 	bl	8001798 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d902      	bls.n	8004cdc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cda:	e005      	b.n	8004ce8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ef      	bne.n	8004cc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d14a      	bne.n	8004d84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d111      	bne.n	8004d18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cf4:	4b26      	ldr	r3, [pc, #152]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	0211      	lsls	r1, r2, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	0912      	lsrs	r2, r2, #4
 8004d0c:	0452      	lsls	r2, r2, #17
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	491f      	ldr	r1, [pc, #124]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	614b      	str	r3, [r1, #20]
 8004d16:	e011      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d18:	4b1d      	ldr	r3, [pc, #116]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6892      	ldr	r2, [r2, #8]
 8004d28:	0211      	lsls	r1, r2, #8
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6912      	ldr	r2, [r2, #16]
 8004d2e:	0852      	lsrs	r2, r2, #1
 8004d30:	3a01      	subs	r2, #1
 8004d32:	0652      	lsls	r2, r2, #25
 8004d34:	430a      	orrs	r2, r1
 8004d36:	4916      	ldr	r1, [pc, #88]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d3c:	4b14      	ldr	r3, [pc, #80]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a13      	ldr	r2, [pc, #76]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fc fd26 	bl	8001798 <HAL_GetTick>
 8004d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d4e:	e009      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d50:	f7fc fd22 	bl	8001798 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d902      	bls.n	8004d64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	73fb      	strb	r3, [r7, #15]
          break;
 8004d62:	e005      	b.n	8004d70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d64:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ef      	beq.n	8004d50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d76:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	4904      	ldr	r1, [pc, #16]	@ (8004d90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40021000 	.word	0x40021000

08004d94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e049      	b.n	8004e3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc fb68 	bl	8001490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f000 fa50 	bl	8005278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_TIM_PWM_Start+0x24>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e03c      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d109      	bne.n	8004e82 <HAL_TIM_PWM_Start+0x3e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	e02f      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d109      	bne.n	8004e9c <HAL_TIM_PWM_Start+0x58>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e022      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d109      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0x72>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	bf14      	ite	ne
 8004eae:	2301      	movne	r3, #1
 8004eb0:	2300      	moveq	r3, #0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	e015      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d109      	bne.n	8004ed0 <HAL_TIM_PWM_Start+0x8c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	bf14      	ite	ne
 8004ec8:	2301      	movne	r3, #1
 8004eca:	2300      	moveq	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e008      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x9e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	bf14      	ite	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	2300      	moveq	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e09c      	b.n	8005024 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_PWM_Start+0xb6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ef8:	e023      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_PWM_Start+0xc6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f08:	e01b      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_PWM_Start+0xd6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f18:	e013      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PWM_Start+0xe6>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f28:	e00b      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b10      	cmp	r3, #16
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_PWM_Start+0xf6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f38:	e003      	b.n	8004f42 <HAL_TIM_PWM_Start+0xfe>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2201      	movs	r2, #1
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fd10 	bl	8005970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a35      	ldr	r2, [pc, #212]	@ (800502c <HAL_TIM_PWM_Start+0x1e8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x13e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a34      	ldr	r2, [pc, #208]	@ (8005030 <HAL_TIM_PWM_Start+0x1ec>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x13e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a32      	ldr	r2, [pc, #200]	@ (8005034 <HAL_TIM_PWM_Start+0x1f0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x13e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a31      	ldr	r2, [pc, #196]	@ (8005038 <HAL_TIM_PWM_Start+0x1f4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIM_PWM_Start+0x13e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800503c <HAL_TIM_PWM_Start+0x1f8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_PWM_Start+0x142>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_TIM_PWM_Start+0x144>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a22      	ldr	r2, [pc, #136]	@ (800502c <HAL_TIM_PWM_Start+0x1e8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_TIM_PWM_Start+0x19e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fae:	d018      	beq.n	8004fe2 <HAL_TIM_PWM_Start+0x19e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	@ (8005040 <HAL_TIM_PWM_Start+0x1fc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_TIM_PWM_Start+0x19e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	@ (8005044 <HAL_TIM_PWM_Start+0x200>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_TIM_PWM_Start+0x19e>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005048 <HAL_TIM_PWM_Start+0x204>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_TIM_PWM_Start+0x19e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a17      	ldr	r2, [pc, #92]	@ (8005030 <HAL_TIM_PWM_Start+0x1ec>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_TIM_PWM_Start+0x19e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a15      	ldr	r2, [pc, #84]	@ (8005034 <HAL_TIM_PWM_Start+0x1f0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d115      	bne.n	800500e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	4b18      	ldr	r3, [pc, #96]	@ (800504c <HAL_TIM_PWM_Start+0x208>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b06      	cmp	r3, #6
 8004ff2:	d015      	beq.n	8005020 <HAL_TIM_PWM_Start+0x1dc>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ffa:	d011      	beq.n	8005020 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	e008      	b.n	8005020 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e000      	b.n	8005022 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	00010007 	.word	0x00010007

08005050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800506a:	2302      	movs	r3, #2
 800506c:	e0ff      	b.n	800526e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b14      	cmp	r3, #20
 800507a:	f200 80f0 	bhi.w	800525e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800507e:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	080050d9 	.word	0x080050d9
 8005088:	0800525f 	.word	0x0800525f
 800508c:	0800525f 	.word	0x0800525f
 8005090:	0800525f 	.word	0x0800525f
 8005094:	08005119 	.word	0x08005119
 8005098:	0800525f 	.word	0x0800525f
 800509c:	0800525f 	.word	0x0800525f
 80050a0:	0800525f 	.word	0x0800525f
 80050a4:	0800515b 	.word	0x0800515b
 80050a8:	0800525f 	.word	0x0800525f
 80050ac:	0800525f 	.word	0x0800525f
 80050b0:	0800525f 	.word	0x0800525f
 80050b4:	0800519b 	.word	0x0800519b
 80050b8:	0800525f 	.word	0x0800525f
 80050bc:	0800525f 	.word	0x0800525f
 80050c0:	0800525f 	.word	0x0800525f
 80050c4:	080051dd 	.word	0x080051dd
 80050c8:	0800525f 	.word	0x0800525f
 80050cc:	0800525f 	.word	0x0800525f
 80050d0:	0800525f 	.word	0x0800525f
 80050d4:	0800521d 	.word	0x0800521d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f970 	bl	80053c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0208 	orr.w	r2, r2, #8
 80050f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6999      	ldr	r1, [r3, #24]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	619a      	str	r2, [r3, #24]
      break;
 8005116:	e0a5      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f9e0 	bl	80054e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6999      	ldr	r1, [r3, #24]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	619a      	str	r2, [r3, #24]
      break;
 8005158:	e084      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fa49 	bl	80055f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0208 	orr.w	r2, r2, #8
 8005174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0204 	bic.w	r2, r2, #4
 8005184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
      break;
 8005198:	e064      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fab1 	bl	8005708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69d9      	ldr	r1, [r3, #28]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	021a      	lsls	r2, r3, #8
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	61da      	str	r2, [r3, #28]
      break;
 80051da:	e043      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fafa 	bl	80057dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0208 	orr.w	r2, r2, #8
 80051f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0204 	bic.w	r2, r2, #4
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800521a:	e023      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fb3e 	bl	80058a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005236:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005246:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	021a      	lsls	r2, r3, #8
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800525c:	e002      	b.n	8005264 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	75fb      	strb	r3, [r7, #23]
      break;
 8005262:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800526c:	7dfb      	ldrb	r3, [r7, #23]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop

08005278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a46      	ldr	r2, [pc, #280]	@ (80053a4 <TIM_Base_SetConfig+0x12c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d00f      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a43      	ldr	r2, [pc, #268]	@ (80053a8 <TIM_Base_SetConfig+0x130>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a42      	ldr	r2, [pc, #264]	@ (80053ac <TIM_Base_SetConfig+0x134>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a41      	ldr	r2, [pc, #260]	@ (80053b0 <TIM_Base_SetConfig+0x138>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a40      	ldr	r2, [pc, #256]	@ (80053b4 <TIM_Base_SetConfig+0x13c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d108      	bne.n	80052ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a35      	ldr	r2, [pc, #212]	@ (80053a4 <TIM_Base_SetConfig+0x12c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01f      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d8:	d01b      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a32      	ldr	r2, [pc, #200]	@ (80053a8 <TIM_Base_SetConfig+0x130>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d017      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a31      	ldr	r2, [pc, #196]	@ (80053ac <TIM_Base_SetConfig+0x134>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a30      	ldr	r2, [pc, #192]	@ (80053b0 <TIM_Base_SetConfig+0x138>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00f      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2f      	ldr	r2, [pc, #188]	@ (80053b4 <TIM_Base_SetConfig+0x13c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00b      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	@ (80053b8 <TIM_Base_SetConfig+0x140>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d007      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a2d      	ldr	r2, [pc, #180]	@ (80053bc <TIM_Base_SetConfig+0x144>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2c      	ldr	r2, [pc, #176]	@ (80053c0 <TIM_Base_SetConfig+0x148>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d108      	bne.n	8005324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a16      	ldr	r2, [pc, #88]	@ (80053a4 <TIM_Base_SetConfig+0x12c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00f      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a18      	ldr	r2, [pc, #96]	@ (80053b4 <TIM_Base_SetConfig+0x13c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00b      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <TIM_Base_SetConfig+0x140>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d007      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <TIM_Base_SetConfig+0x144>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d003      	beq.n	8005370 <TIM_Base_SetConfig+0xf8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a15      	ldr	r2, [pc, #84]	@ (80053c0 <TIM_Base_SetConfig+0x148>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d103      	bne.n	8005378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f023 0201 	bic.w	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]
  }
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40014000 	.word	0x40014000
 80053bc:	40014400 	.word	0x40014400
 80053c0:	40014800 	.word	0x40014800

080053c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	f023 0201 	bic.w	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 0302 	bic.w	r3, r3, #2
 8005410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a2c      	ldr	r2, [pc, #176]	@ (80054d0 <TIM_OC1_SetConfig+0x10c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00f      	beq.n	8005444 <TIM_OC1_SetConfig+0x80>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a2b      	ldr	r2, [pc, #172]	@ (80054d4 <TIM_OC1_SetConfig+0x110>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <TIM_OC1_SetConfig+0x80>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a2a      	ldr	r2, [pc, #168]	@ (80054d8 <TIM_OC1_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <TIM_OC1_SetConfig+0x80>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a29      	ldr	r2, [pc, #164]	@ (80054dc <TIM_OC1_SetConfig+0x118>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <TIM_OC1_SetConfig+0x80>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a28      	ldr	r2, [pc, #160]	@ (80054e0 <TIM_OC1_SetConfig+0x11c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10c      	bne.n	800545e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 0308 	bic.w	r3, r3, #8
 800544a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 0304 	bic.w	r3, r3, #4
 800545c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1b      	ldr	r2, [pc, #108]	@ (80054d0 <TIM_OC1_SetConfig+0x10c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00f      	beq.n	8005486 <TIM_OC1_SetConfig+0xc2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1a      	ldr	r2, [pc, #104]	@ (80054d4 <TIM_OC1_SetConfig+0x110>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_OC1_SetConfig+0xc2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a19      	ldr	r2, [pc, #100]	@ (80054d8 <TIM_OC1_SetConfig+0x114>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_OC1_SetConfig+0xc2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a18      	ldr	r2, [pc, #96]	@ (80054dc <TIM_OC1_SetConfig+0x118>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC1_SetConfig+0xc2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a17      	ldr	r2, [pc, #92]	@ (80054e0 <TIM_OC1_SetConfig+0x11c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40013400 	.word	0x40013400
 80054d8:	40014000 	.word	0x40014000
 80054dc:	40014400 	.word	0x40014400
 80054e0:	40014800 	.word	0x40014800

080054e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f023 0210 	bic.w	r2, r3, #16
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800551e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0320 	bic.w	r3, r3, #32
 8005532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a28      	ldr	r2, [pc, #160]	@ (80055e4 <TIM_OC2_SetConfig+0x100>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_OC2_SetConfig+0x6c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a27      	ldr	r2, [pc, #156]	@ (80055e8 <TIM_OC2_SetConfig+0x104>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10d      	bne.n	800556c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800556a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a1d      	ldr	r2, [pc, #116]	@ (80055e4 <TIM_OC2_SetConfig+0x100>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00f      	beq.n	8005594 <TIM_OC2_SetConfig+0xb0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a1c      	ldr	r2, [pc, #112]	@ (80055e8 <TIM_OC2_SetConfig+0x104>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_OC2_SetConfig+0xb0>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a1b      	ldr	r2, [pc, #108]	@ (80055ec <TIM_OC2_SetConfig+0x108>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_OC2_SetConfig+0xb0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a1a      	ldr	r2, [pc, #104]	@ (80055f0 <TIM_OC2_SetConfig+0x10c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_OC2_SetConfig+0xb0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a19      	ldr	r2, [pc, #100]	@ (80055f4 <TIM_OC2_SetConfig+0x110>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d113      	bne.n	80055bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800559a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800

080055f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a27      	ldr	r2, [pc, #156]	@ (80056f4 <TIM_OC3_SetConfig+0xfc>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_OC3_SetConfig+0x6a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <TIM_OC3_SetConfig+0x100>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10d      	bne.n	800567e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800567c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a1c      	ldr	r2, [pc, #112]	@ (80056f4 <TIM_OC3_SetConfig+0xfc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00f      	beq.n	80056a6 <TIM_OC3_SetConfig+0xae>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a1b      	ldr	r2, [pc, #108]	@ (80056f8 <TIM_OC3_SetConfig+0x100>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00b      	beq.n	80056a6 <TIM_OC3_SetConfig+0xae>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1a      	ldr	r2, [pc, #104]	@ (80056fc <TIM_OC3_SetConfig+0x104>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d007      	beq.n	80056a6 <TIM_OC3_SetConfig+0xae>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a19      	ldr	r2, [pc, #100]	@ (8005700 <TIM_OC3_SetConfig+0x108>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_OC3_SetConfig+0xae>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a18      	ldr	r2, [pc, #96]	@ (8005704 <TIM_OC3_SetConfig+0x10c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d113      	bne.n	80056ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40013400 	.word	0x40013400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800

08005708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	021b      	lsls	r3, r3, #8
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	031b      	lsls	r3, r3, #12
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a18      	ldr	r2, [pc, #96]	@ (80057c8 <TIM_OC4_SetConfig+0xc0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00f      	beq.n	800578c <TIM_OC4_SetConfig+0x84>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a17      	ldr	r2, [pc, #92]	@ (80057cc <TIM_OC4_SetConfig+0xc4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00b      	beq.n	800578c <TIM_OC4_SetConfig+0x84>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a16      	ldr	r2, [pc, #88]	@ (80057d0 <TIM_OC4_SetConfig+0xc8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_OC4_SetConfig+0x84>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a15      	ldr	r2, [pc, #84]	@ (80057d4 <TIM_OC4_SetConfig+0xcc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC4_SetConfig+0x84>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a14      	ldr	r2, [pc, #80]	@ (80057d8 <TIM_OC4_SetConfig+0xd0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d109      	bne.n	80057a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	019b      	lsls	r3, r3, #6
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800

080057dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005820:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	041b      	lsls	r3, r3, #16
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a17      	ldr	r2, [pc, #92]	@ (8005890 <TIM_OC5_SetConfig+0xb4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00f      	beq.n	8005856 <TIM_OC5_SetConfig+0x7a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a16      	ldr	r2, [pc, #88]	@ (8005894 <TIM_OC5_SetConfig+0xb8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00b      	beq.n	8005856 <TIM_OC5_SetConfig+0x7a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a15      	ldr	r2, [pc, #84]	@ (8005898 <TIM_OC5_SetConfig+0xbc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <TIM_OC5_SetConfig+0x7a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a14      	ldr	r2, [pc, #80]	@ (800589c <TIM_OC5_SetConfig+0xc0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC5_SetConfig+0x7a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a13      	ldr	r2, [pc, #76]	@ (80058a0 <TIM_OC5_SetConfig+0xc4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d109      	bne.n	800586a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	621a      	str	r2, [r3, #32]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40013400 	.word	0x40013400
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800

080058a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	051b      	lsls	r3, r3, #20
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a18      	ldr	r2, [pc, #96]	@ (800595c <TIM_OC6_SetConfig+0xb8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00f      	beq.n	8005920 <TIM_OC6_SetConfig+0x7c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a17      	ldr	r2, [pc, #92]	@ (8005960 <TIM_OC6_SetConfig+0xbc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00b      	beq.n	8005920 <TIM_OC6_SetConfig+0x7c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a16      	ldr	r2, [pc, #88]	@ (8005964 <TIM_OC6_SetConfig+0xc0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_OC6_SetConfig+0x7c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a15      	ldr	r2, [pc, #84]	@ (8005968 <TIM_OC6_SetConfig+0xc4>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_OC6_SetConfig+0x7c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a14      	ldr	r2, [pc, #80]	@ (800596c <TIM_OC6_SetConfig+0xc8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d109      	bne.n	8005934 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005926:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	621a      	str	r2, [r3, #32]
}
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40013400 	.word	0x40013400
 8005964:	40014000 	.word	0x40014000
 8005968:	40014400 	.word	0x40014400
 800596c:	40014800 	.word	0x40014800

08005970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2201      	movs	r2, #1
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1a      	ldr	r2, [r3, #32]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e068      	b.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2e      	ldr	r2, [pc, #184]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d108      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01d      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a46:	d018      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a13      	ldr	r2, [pc, #76]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a14      	ldr	r2, [pc, #80]	@ (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10c      	bne.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40014000 	.word	0x40014000

08005acc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e040      	b.n	8005b60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fb fd22 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2224      	movs	r2, #36	@ 0x24
 8005af8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fc32 	bl	800637c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f977 	bl	8005e0c <UART_SetConfig>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e01b      	b.n	8005b60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fcb1 	bl	80064c0 <UART_CheckIdleState>
 8005b5e:	4603      	mov	r3, r0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08a      	sub	sp, #40	@ 0x28
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d177      	bne.n	8005c70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_UART_Transmit+0x24>
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e070      	b.n	8005c72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2221      	movs	r2, #33	@ 0x21
 8005b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b9e:	f7fb fdfb 	bl	8001798 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	88fa      	ldrh	r2, [r7, #6]
 8005bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_UART_Transmit+0x68>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e003      	b.n	8005bd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bd8:	e02f      	b.n	8005c3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2180      	movs	r1, #128	@ 0x80
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fd13 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e03b      	b.n	8005c72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10b      	bne.n	8005c18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	881a      	ldrh	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	3302      	adds	r3, #2
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e007      	b.n	8005c28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	3301      	adds	r3, #1
 8005c26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1c9      	bne.n	8005bda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2140      	movs	r1, #64	@ 0x40
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fcdd 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e005      	b.n	8005c72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e000      	b.n	8005c72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
  }
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b08a      	sub	sp, #40	@ 0x28
 8005c7e:	af02      	add	r7, sp, #8
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	f040 80b6 	bne.w	8005e02 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_UART_Receive+0x28>
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e0ae      	b.n	8005e04 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2222      	movs	r2, #34	@ 0x22
 8005cb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cbc:	f7fb fd6c 	bl	8001798 <HAL_GetTick>
 8005cc0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	88fa      	ldrh	r2, [r7, #6]
 8005cce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cda:	d10e      	bne.n	8005cfa <HAL_UART_Receive+0x80>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d105      	bne.n	8005cf0 <HAL_UART_Receive+0x76>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005cea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cee:	e02d      	b.n	8005d4c <HAL_UART_Receive+0xd2>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	22ff      	movs	r2, #255	@ 0xff
 8005cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cf8:	e028      	b.n	8005d4c <HAL_UART_Receive+0xd2>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10d      	bne.n	8005d1e <HAL_UART_Receive+0xa4>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_UART_Receive+0x9a>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	22ff      	movs	r2, #255	@ 0xff
 8005d0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005d12:	e01b      	b.n	8005d4c <HAL_UART_Receive+0xd2>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	227f      	movs	r2, #127	@ 0x7f
 8005d18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005d1c:	e016      	b.n	8005d4c <HAL_UART_Receive+0xd2>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d26:	d10d      	bne.n	8005d44 <HAL_UART_Receive+0xca>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d104      	bne.n	8005d3a <HAL_UART_Receive+0xc0>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	227f      	movs	r2, #127	@ 0x7f
 8005d34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005d38:	e008      	b.n	8005d4c <HAL_UART_Receive+0xd2>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	223f      	movs	r2, #63	@ 0x3f
 8005d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005d42:	e003      	b.n	8005d4c <HAL_UART_Receive+0xd2>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d5c:	d108      	bne.n	8005d70 <HAL_UART_Receive+0xf6>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d104      	bne.n	8005d70 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e003      	b.n	8005d78 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d78:	e037      	b.n	8005dea <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2120      	movs	r1, #32
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fc43 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e033      	b.n	8005e04 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10c      	bne.n	8005dbc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	8a7b      	ldrh	r3, [r7, #18]
 8005dac:	4013      	ands	r3, r2
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	3302      	adds	r3, #2
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e00d      	b.n	8005dd8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	8a7b      	ldrh	r3, [r7, #18]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4013      	ands	r3, r2
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1c1      	bne.n	8005d7a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
  }
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e10:	b08a      	sub	sp, #40	@ 0x28
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	431a      	orrs	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4ba4      	ldr	r3, [pc, #656]	@ (80060cc <UART_SetConfig+0x2c0>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e44:	430b      	orrs	r3, r1
 8005e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a99      	ldr	r2, [pc, #612]	@ (80060d0 <UART_SetConfig+0x2c4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d004      	beq.n	8005e78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e74:	4313      	orrs	r3, r2
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a90      	ldr	r2, [pc, #576]	@ (80060d4 <UART_SetConfig+0x2c8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d126      	bne.n	8005ee4 <UART_SetConfig+0xd8>
 8005e96:	4b90      	ldr	r3, [pc, #576]	@ (80060d8 <UART_SetConfig+0x2cc>)
 8005e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d81b      	bhi.n	8005edc <UART_SetConfig+0xd0>
 8005ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <UART_SetConfig+0xa0>)
 8005ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eaa:	bf00      	nop
 8005eac:	08005ebd 	.word	0x08005ebd
 8005eb0:	08005ecd 	.word	0x08005ecd
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ed5 	.word	0x08005ed5
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec2:	e116      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eca:	e112      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed2:	e10e      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005ed4:	2308      	movs	r3, #8
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eda:	e10a      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005edc:	2310      	movs	r3, #16
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee2:	e106      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a7c      	ldr	r2, [pc, #496]	@ (80060dc <UART_SetConfig+0x2d0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d138      	bne.n	8005f60 <UART_SetConfig+0x154>
 8005eee:	4b7a      	ldr	r3, [pc, #488]	@ (80060d8 <UART_SetConfig+0x2cc>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef4:	f003 030c 	and.w	r3, r3, #12
 8005ef8:	2b0c      	cmp	r3, #12
 8005efa:	d82d      	bhi.n	8005f58 <UART_SetConfig+0x14c>
 8005efc:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <UART_SetConfig+0xf8>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f39 	.word	0x08005f39
 8005f08:	08005f59 	.word	0x08005f59
 8005f0c:	08005f59 	.word	0x08005f59
 8005f10:	08005f59 	.word	0x08005f59
 8005f14:	08005f49 	.word	0x08005f49
 8005f18:	08005f59 	.word	0x08005f59
 8005f1c:	08005f59 	.word	0x08005f59
 8005f20:	08005f59 	.word	0x08005f59
 8005f24:	08005f41 	.word	0x08005f41
 8005f28:	08005f59 	.word	0x08005f59
 8005f2c:	08005f59 	.word	0x08005f59
 8005f30:	08005f59 	.word	0x08005f59
 8005f34:	08005f51 	.word	0x08005f51
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f3e:	e0d8      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005f40:	2302      	movs	r3, #2
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f46:	e0d4      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4e:	e0d0      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005f50:	2308      	movs	r3, #8
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f56:	e0cc      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5e:	e0c8      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5e      	ldr	r2, [pc, #376]	@ (80060e0 <UART_SetConfig+0x2d4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d125      	bne.n	8005fb6 <UART_SetConfig+0x1aa>
 8005f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80060d8 <UART_SetConfig+0x2cc>)
 8005f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f74:	2b30      	cmp	r3, #48	@ 0x30
 8005f76:	d016      	beq.n	8005fa6 <UART_SetConfig+0x19a>
 8005f78:	2b30      	cmp	r3, #48	@ 0x30
 8005f7a:	d818      	bhi.n	8005fae <UART_SetConfig+0x1a2>
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d00a      	beq.n	8005f96 <UART_SetConfig+0x18a>
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d814      	bhi.n	8005fae <UART_SetConfig+0x1a2>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <UART_SetConfig+0x182>
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	d008      	beq.n	8005f9e <UART_SetConfig+0x192>
 8005f8c:	e00f      	b.n	8005fae <UART_SetConfig+0x1a2>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f94:	e0ad      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005f96:	2302      	movs	r3, #2
 8005f98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f9c:	e0a9      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fa4:	e0a5      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fac:	e0a1      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005fae:	2310      	movs	r3, #16
 8005fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb4:	e09d      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a4a      	ldr	r2, [pc, #296]	@ (80060e4 <UART_SetConfig+0x2d8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d125      	bne.n	800600c <UART_SetConfig+0x200>
 8005fc0:	4b45      	ldr	r3, [pc, #276]	@ (80060d8 <UART_SetConfig+0x2cc>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005fca:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fcc:	d016      	beq.n	8005ffc <UART_SetConfig+0x1f0>
 8005fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fd0:	d818      	bhi.n	8006004 <UART_SetConfig+0x1f8>
 8005fd2:	2b80      	cmp	r3, #128	@ 0x80
 8005fd4:	d00a      	beq.n	8005fec <UART_SetConfig+0x1e0>
 8005fd6:	2b80      	cmp	r3, #128	@ 0x80
 8005fd8:	d814      	bhi.n	8006004 <UART_SetConfig+0x1f8>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <UART_SetConfig+0x1d8>
 8005fde:	2b40      	cmp	r3, #64	@ 0x40
 8005fe0:	d008      	beq.n	8005ff4 <UART_SetConfig+0x1e8>
 8005fe2:	e00f      	b.n	8006004 <UART_SetConfig+0x1f8>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fea:	e082      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005fec:	2302      	movs	r3, #2
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff2:	e07e      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ffa:	e07a      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006002:	e076      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8006004:	2310      	movs	r3, #16
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600a:	e072      	b.n	80060f2 <UART_SetConfig+0x2e6>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a35      	ldr	r2, [pc, #212]	@ (80060e8 <UART_SetConfig+0x2dc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d12a      	bne.n	800606c <UART_SetConfig+0x260>
 8006016:	4b30      	ldr	r3, [pc, #192]	@ (80060d8 <UART_SetConfig+0x2cc>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006020:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006024:	d01a      	beq.n	800605c <UART_SetConfig+0x250>
 8006026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800602a:	d81b      	bhi.n	8006064 <UART_SetConfig+0x258>
 800602c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006030:	d00c      	beq.n	800604c <UART_SetConfig+0x240>
 8006032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006036:	d815      	bhi.n	8006064 <UART_SetConfig+0x258>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <UART_SetConfig+0x238>
 800603c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006040:	d008      	beq.n	8006054 <UART_SetConfig+0x248>
 8006042:	e00f      	b.n	8006064 <UART_SetConfig+0x258>
 8006044:	2300      	movs	r3, #0
 8006046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800604a:	e052      	b.n	80060f2 <UART_SetConfig+0x2e6>
 800604c:	2302      	movs	r3, #2
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006052:	e04e      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8006054:	2304      	movs	r3, #4
 8006056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800605a:	e04a      	b.n	80060f2 <UART_SetConfig+0x2e6>
 800605c:	2308      	movs	r3, #8
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006062:	e046      	b.n	80060f2 <UART_SetConfig+0x2e6>
 8006064:	2310      	movs	r3, #16
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606a:	e042      	b.n	80060f2 <UART_SetConfig+0x2e6>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a17      	ldr	r2, [pc, #92]	@ (80060d0 <UART_SetConfig+0x2c4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d13a      	bne.n	80060ec <UART_SetConfig+0x2e0>
 8006076:	4b18      	ldr	r3, [pc, #96]	@ (80060d8 <UART_SetConfig+0x2cc>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006080:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006084:	d01a      	beq.n	80060bc <UART_SetConfig+0x2b0>
 8006086:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800608a:	d81b      	bhi.n	80060c4 <UART_SetConfig+0x2b8>
 800608c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006090:	d00c      	beq.n	80060ac <UART_SetConfig+0x2a0>
 8006092:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006096:	d815      	bhi.n	80060c4 <UART_SetConfig+0x2b8>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <UART_SetConfig+0x298>
 800609c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a0:	d008      	beq.n	80060b4 <UART_SetConfig+0x2a8>
 80060a2:	e00f      	b.n	80060c4 <UART_SetConfig+0x2b8>
 80060a4:	2300      	movs	r3, #0
 80060a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060aa:	e022      	b.n	80060f2 <UART_SetConfig+0x2e6>
 80060ac:	2302      	movs	r3, #2
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b2:	e01e      	b.n	80060f2 <UART_SetConfig+0x2e6>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ba:	e01a      	b.n	80060f2 <UART_SetConfig+0x2e6>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c2:	e016      	b.n	80060f2 <UART_SetConfig+0x2e6>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ca:	e012      	b.n	80060f2 <UART_SetConfig+0x2e6>
 80060cc:	efff69f3 	.word	0xefff69f3
 80060d0:	40008000 	.word	0x40008000
 80060d4:	40013800 	.word	0x40013800
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40004400 	.word	0x40004400
 80060e0:	40004800 	.word	0x40004800
 80060e4:	40004c00 	.word	0x40004c00
 80060e8:	40005000 	.word	0x40005000
 80060ec:	2310      	movs	r3, #16
 80060ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a9f      	ldr	r2, [pc, #636]	@ (8006374 <UART_SetConfig+0x568>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d17a      	bne.n	80061f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006100:	2b08      	cmp	r3, #8
 8006102:	d824      	bhi.n	800614e <UART_SetConfig+0x342>
 8006104:	a201      	add	r2, pc, #4	@ (adr r2, 800610c <UART_SetConfig+0x300>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006131 	.word	0x08006131
 8006110:	0800614f 	.word	0x0800614f
 8006114:	08006139 	.word	0x08006139
 8006118:	0800614f 	.word	0x0800614f
 800611c:	0800613f 	.word	0x0800613f
 8006120:	0800614f 	.word	0x0800614f
 8006124:	0800614f 	.word	0x0800614f
 8006128:	0800614f 	.word	0x0800614f
 800612c:	08006147 	.word	0x08006147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006130:	f7fe f8e8 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8006134:	61f8      	str	r0, [r7, #28]
        break;
 8006136:	e010      	b.n	800615a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006138:	4b8f      	ldr	r3, [pc, #572]	@ (8006378 <UART_SetConfig+0x56c>)
 800613a:	61fb      	str	r3, [r7, #28]
        break;
 800613c:	e00d      	b.n	800615a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fe f849 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8006142:	61f8      	str	r0, [r7, #28]
        break;
 8006144:	e009      	b.n	800615a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800614a:	61fb      	str	r3, [r7, #28]
        break;
 800614c:	e005      	b.n	800615a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 80fb 	beq.w	8006358 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	4613      	mov	r3, r2
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	4413      	add	r3, r2
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	429a      	cmp	r2, r3
 8006170:	d305      	bcc.n	800617e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	429a      	cmp	r2, r3
 800617c:	d903      	bls.n	8006186 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006184:	e0e8      	b.n	8006358 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2200      	movs	r2, #0
 800618a:	461c      	mov	r4, r3
 800618c:	4615      	mov	r5, r2
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	022b      	lsls	r3, r5, #8
 8006198:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800619c:	0222      	lsls	r2, r4, #8
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	6849      	ldr	r1, [r1, #4]
 80061a2:	0849      	lsrs	r1, r1, #1
 80061a4:	2000      	movs	r0, #0
 80061a6:	4688      	mov	r8, r1
 80061a8:	4681      	mov	r9, r0
 80061aa:	eb12 0a08 	adds.w	sl, r2, r8
 80061ae:	eb43 0b09 	adc.w	fp, r3, r9
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c0:	4650      	mov	r0, sl
 80061c2:	4659      	mov	r1, fp
 80061c4:	f7fa fb3a 	bl	800083c <__aeabi_uldivmod>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4613      	mov	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061d6:	d308      	bcc.n	80061ea <UART_SetConfig+0x3de>
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061de:	d204      	bcs.n	80061ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	60da      	str	r2, [r3, #12]
 80061e8:	e0b6      	b.n	8006358 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061f0:	e0b2      	b.n	8006358 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061fa:	d15e      	bne.n	80062ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80061fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006200:	2b08      	cmp	r3, #8
 8006202:	d828      	bhi.n	8006256 <UART_SetConfig+0x44a>
 8006204:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <UART_SetConfig+0x400>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	08006231 	.word	0x08006231
 8006210:	08006239 	.word	0x08006239
 8006214:	08006241 	.word	0x08006241
 8006218:	08006257 	.word	0x08006257
 800621c:	08006247 	.word	0x08006247
 8006220:	08006257 	.word	0x08006257
 8006224:	08006257 	.word	0x08006257
 8006228:	08006257 	.word	0x08006257
 800622c:	0800624f 	.word	0x0800624f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006230:	f7fe f868 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8006234:	61f8      	str	r0, [r7, #28]
        break;
 8006236:	e014      	b.n	8006262 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006238:	f7fe f87a 	bl	8004330 <HAL_RCC_GetPCLK2Freq>
 800623c:	61f8      	str	r0, [r7, #28]
        break;
 800623e:	e010      	b.n	8006262 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006240:	4b4d      	ldr	r3, [pc, #308]	@ (8006378 <UART_SetConfig+0x56c>)
 8006242:	61fb      	str	r3, [r7, #28]
        break;
 8006244:	e00d      	b.n	8006262 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006246:	f7fd ffc5 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 800624a:	61f8      	str	r0, [r7, #28]
        break;
 800624c:	e009      	b.n	8006262 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006252:	61fb      	str	r3, [r7, #28]
        break;
 8006254:	e005      	b.n	8006262 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d077      	beq.n	8006358 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	005a      	lsls	r2, r3, #1
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	085b      	lsrs	r3, r3, #1
 8006272:	441a      	add	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	fbb2 f3f3 	udiv	r3, r2, r3
 800627c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b0f      	cmp	r3, #15
 8006282:	d916      	bls.n	80062b2 <UART_SetConfig+0x4a6>
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800628a:	d212      	bcs.n	80062b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f023 030f 	bic.w	r3, r3, #15
 8006294:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	b29b      	uxth	r3, r3
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	8afb      	ldrh	r3, [r7, #22]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	8afa      	ldrh	r2, [r7, #22]
 80062ae:	60da      	str	r2, [r3, #12]
 80062b0:	e052      	b.n	8006358 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062b8:	e04e      	b.n	8006358 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d827      	bhi.n	8006312 <UART_SetConfig+0x506>
 80062c2:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <UART_SetConfig+0x4bc>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062ed 	.word	0x080062ed
 80062cc:	080062f5 	.word	0x080062f5
 80062d0:	080062fd 	.word	0x080062fd
 80062d4:	08006313 	.word	0x08006313
 80062d8:	08006303 	.word	0x08006303
 80062dc:	08006313 	.word	0x08006313
 80062e0:	08006313 	.word	0x08006313
 80062e4:	08006313 	.word	0x08006313
 80062e8:	0800630b 	.word	0x0800630b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ec:	f7fe f80a 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 80062f0:	61f8      	str	r0, [r7, #28]
        break;
 80062f2:	e014      	b.n	800631e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062f4:	f7fe f81c 	bl	8004330 <HAL_RCC_GetPCLK2Freq>
 80062f8:	61f8      	str	r0, [r7, #28]
        break;
 80062fa:	e010      	b.n	800631e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006378 <UART_SetConfig+0x56c>)
 80062fe:	61fb      	str	r3, [r7, #28]
        break;
 8006300:	e00d      	b.n	800631e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006302:	f7fd ff67 	bl	80041d4 <HAL_RCC_GetSysClockFreq>
 8006306:	61f8      	str	r0, [r7, #28]
        break;
 8006308:	e009      	b.n	800631e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800630a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800630e:	61fb      	str	r3, [r7, #28]
        break;
 8006310:	e005      	b.n	800631e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800631c:	bf00      	nop
    }

    if (pclk != 0U)
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d019      	beq.n	8006358 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	085a      	lsrs	r2, r3, #1
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	fbb2 f3f3 	udiv	r3, r2, r3
 8006336:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b0f      	cmp	r3, #15
 800633c:	d909      	bls.n	8006352 <UART_SetConfig+0x546>
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006344:	d205      	bcs.n	8006352 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60da      	str	r2, [r3, #12]
 8006350:	e002      	b.n	8006358 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006364:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006368:	4618      	mov	r0, r3
 800636a:	3728      	adds	r7, #40	@ 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006372:	bf00      	nop
 8006374:	40008000 	.word	0x40008000
 8006378:	00f42400 	.word	0x00f42400

0800637c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01a      	beq.n	8006492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800647a:	d10a      	bne.n	8006492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b098      	sub	sp, #96	@ 0x60
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d0:	f7fb f962 	bl	8001798 <HAL_GetTick>
 80064d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d12e      	bne.n	8006542 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f88c 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d021      	beq.n	8006542 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800650c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006512:	653b      	str	r3, [r7, #80]	@ 0x50
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800651c:	647b      	str	r3, [r7, #68]	@ 0x44
 800651e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800652a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e6      	bne.n	80064fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e062      	b.n	8006608 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b04      	cmp	r3, #4
 800654e:	d149      	bne.n	80065e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006550:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f856 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d03c      	beq.n	80065e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	623b      	str	r3, [r7, #32]
   return(result);
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800657e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006588:	633b      	str	r3, [r7, #48]	@ 0x30
 800658a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800658e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e6      	bne.n	800656a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065bc:	61fa      	str	r2, [r7, #28]
 80065be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e5      	bne.n	800659c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e011      	b.n	8006608 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3758      	adds	r7, #88	@ 0x58
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	4613      	mov	r3, r2
 800661e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006620:	e04f      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d04b      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fb f8b5 	bl	8001798 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <UART_WaitOnFlagUntilTimeout+0x30>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e04e      	b.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d037      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b80      	cmp	r3, #128	@ 0x80
 8006656:	d034      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b40      	cmp	r3, #64	@ 0x40
 800665c:	d031      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b08      	cmp	r3, #8
 800666a:	d110      	bne.n	800668e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2208      	movs	r2, #8
 8006672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f838 	bl	80066ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2208      	movs	r2, #8
 800667e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e029      	b.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800669c:	d111      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f81e 	bl	80066ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e00f      	b.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4013      	ands	r3, r2
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	bf0c      	ite	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	2300      	movne	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d0a0      	beq.n	8006622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b095      	sub	sp, #84	@ 0x54
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006710:	643b      	str	r3, [r7, #64]	@ 0x40
 8006712:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800671e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e6      	bne.n	80066f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3308      	adds	r3, #8
 800672a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	61fb      	str	r3, [r7, #28]
   return(result);
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006744:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006746:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800674a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e5      	bne.n	8006724 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800675c:	2b01      	cmp	r3, #1
 800675e:	d118      	bne.n	8006792 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	60bb      	str	r3, [r7, #8]
   return(result);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f023 0310 	bic.w	r3, r3, #16
 8006774:	647b      	str	r3, [r7, #68]	@ 0x44
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6979      	ldr	r1, [r7, #20]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	613b      	str	r3, [r7, #16]
   return(result);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e6      	bne.n	8006760 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80067a6:	bf00      	nop
 80067a8:	3754      	adds	r7, #84	@ 0x54
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	4603      	mov	r3, r0
 80067ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067c4:	2b84      	cmp	r3, #132	@ 0x84
 80067c6:	d005      	beq.n	80067d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	3303      	adds	r3, #3
 80067d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80067d4:	68fb      	ldr	r3, [r7, #12]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80067e6:	f000 fae5 	bl	8006db4 <vTaskStartScheduler>
  
  return osOK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80067f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f2:	b089      	sub	sp, #36	@ 0x24
 80067f4:	af04      	add	r7, sp, #16
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d020      	beq.n	8006844 <osThreadCreate+0x54>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d01c      	beq.n	8006844 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685c      	ldr	r4, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691e      	ldr	r6, [r3, #16]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff ffc8 	bl	80067b2 <makeFreeRtosPriority>
 8006822:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800682c:	9202      	str	r2, [sp, #8]
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	9100      	str	r1, [sp, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	4632      	mov	r2, r6
 8006836:	4629      	mov	r1, r5
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f8ed 	bl	8006a18 <xTaskCreateStatic>
 800683e:	4603      	mov	r3, r0
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	e01c      	b.n	800687e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685c      	ldr	r4, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006850:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff ffaa 	bl	80067b2 <makeFreeRtosPriority>
 800685e:	4602      	mov	r2, r0
 8006860:	f107 030c 	add.w	r3, r7, #12
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	9200      	str	r2, [sp, #0]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4632      	mov	r2, r6
 800686c:	4629      	mov	r1, r5
 800686e:	4620      	mov	r0, r4
 8006870:	f000 f932 	bl	8006ad8 <xTaskCreate>
 8006874:	4603      	mov	r3, r0
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800687e:	68fb      	ldr	r3, [r7, #12]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006888 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <osDelay+0x16>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	e000      	b.n	80068a0 <osDelay+0x18>
 800689e:	2301      	movs	r3, #1
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fa51 	bl	8006d48 <vTaskDelay>
  
  return osOK;
 80068a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f103 0208 	add.w	r2, r3, #8
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f04f 32ff 	mov.w	r2, #4294967295
 80068c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f103 0208 	add.w	r2, r3, #8
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f103 0208 	add.w	r2, r3, #8
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
}
 8006946:	bf00      	nop
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006952:	b480      	push	{r7}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d103      	bne.n	8006972 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	e00c      	b.n	800698c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3308      	adds	r3, #8
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	e002      	b.n	8006980 <vListInsert+0x2e>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	429a      	cmp	r2, r3
 800698a:	d2f6      	bcs.n	800697a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	601a      	str	r2, [r3, #0]
}
 80069b8:	bf00      	nop
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6892      	ldr	r2, [r2, #8]
 80069da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6852      	ldr	r2, [r2, #4]
 80069e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d103      	bne.n	80069f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	1e5a      	subs	r2, r3, #1
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08e      	sub	sp, #56	@ 0x38
 8006a1c:	af04      	add	r7, sp, #16
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10b      	bne.n	8006a44 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	e7fd      	b.n	8006a40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	61fb      	str	r3, [r7, #28]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a62:	2354      	movs	r3, #84	@ 0x54
 8006a64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	2b54      	cmp	r3, #84	@ 0x54
 8006a6a:	d00b      	beq.n	8006a84 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	61bb      	str	r3, [r7, #24]
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01e      	beq.n	8006aca <xTaskCreateStatic+0xb2>
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d01b      	beq.n	8006aca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	9302      	str	r3, [sp, #8]
 8006aac:	f107 0314 	add.w	r3, r7, #20
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f850 	bl	8006b62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ac4:	f000 f8d6 	bl	8006c74 <prvAddNewTaskToReadyList>
 8006ac8:	e001      	b.n	8006ace <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ace:	697b      	ldr	r3, [r7, #20]
	}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3728      	adds	r7, #40	@ 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	@ 0x30
 8006adc:	af04      	add	r7, sp, #16
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fef3 	bl	80078d8 <pvPortMalloc>
 8006af2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00e      	beq.n	8006b18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006afa:	2054      	movs	r0, #84	@ 0x54
 8006afc:	f000 feec 	bl	80078d8 <pvPortMalloc>
 8006b00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b0e:	e005      	b.n	8006b1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b10:	6978      	ldr	r0, [r7, #20]
 8006b12:	f000 ffaf 	bl	8007a74 <vPortFree>
 8006b16:	e001      	b.n	8006b1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d017      	beq.n	8006b52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b2a:	88fa      	ldrh	r2, [r7, #6]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f80e 	bl	8006b62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b46:	69f8      	ldr	r0, [r7, #28]
 8006b48:	f000 f894 	bl	8006c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	e002      	b.n	8006b58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b52:	f04f 33ff 	mov.w	r3, #4294967295
 8006b56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b58:	69bb      	ldr	r3, [r7, #24]
	}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3720      	adds	r7, #32
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b088      	sub	sp, #32
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	f023 0307 	bic.w	r3, r3, #7
 8006b88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	617b      	str	r3, [r7, #20]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01f      	beq.n	8006bf2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e012      	b.n	8006bde <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	7819      	ldrb	r1, [r3, #0]
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3334      	adds	r3, #52	@ 0x34
 8006bc8:	460a      	mov	r2, r1
 8006bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b0f      	cmp	r3, #15
 8006be2:	d9e9      	bls.n	8006bb8 <prvInitialiseNewTask+0x56>
 8006be4:	e000      	b.n	8006be8 <prvInitialiseNewTask+0x86>
			{
				break;
 8006be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bf0:	e003      	b.n	8006bfa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfc:	2b06      	cmp	r3, #6
 8006bfe:	d901      	bls.n	8006c04 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c00:	2306      	movs	r3, #6
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c08:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c0e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	2200      	movs	r2, #0
 8006c14:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff fe68 	bl	80068f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	3318      	adds	r3, #24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fe63 	bl	80068f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c32:	f1c3 0207 	rsb	r2, r3, #7
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	2200      	movs	r2, #0
 8006c44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	68f9      	ldr	r1, [r7, #12]
 8006c52:	69b8      	ldr	r0, [r7, #24]
 8006c54:	f000 fc2c 	bl	80074b0 <pxPortInitialiseStack>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c7c:	f000 fd4c 	bl	8007718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c80:	4b2a      	ldr	r3, [pc, #168]	@ (8006d2c <prvAddNewTaskToReadyList+0xb8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a29      	ldr	r2, [pc, #164]	@ (8006d2c <prvAddNewTaskToReadyList+0xb8>)
 8006c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c8a:	4b29      	ldr	r3, [pc, #164]	@ (8006d30 <prvAddNewTaskToReadyList+0xbc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c92:	4a27      	ldr	r2, [pc, #156]	@ (8006d30 <prvAddNewTaskToReadyList+0xbc>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c98:	4b24      	ldr	r3, [pc, #144]	@ (8006d2c <prvAddNewTaskToReadyList+0xb8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d110      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ca0:	f000 fac4 	bl	800722c <prvInitialiseTaskLists>
 8006ca4:	e00d      	b.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ca6:	4b23      	ldr	r3, [pc, #140]	@ (8006d34 <prvAddNewTaskToReadyList+0xc0>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cae:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <prvAddNewTaskToReadyList+0xbc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d802      	bhi.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d30 <prvAddNewTaskToReadyList+0xbc>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006cca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	409a      	lsls	r2, r3
 8006cd4:	4b19      	ldr	r3, [pc, #100]	@ (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	4a18      	ldr	r2, [pc, #96]	@ (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4a15      	ldr	r2, [pc, #84]	@ (8006d40 <prvAddNewTaskToReadyList+0xcc>)
 8006cec:	441a      	add	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	f7ff fe08 	bl	800690a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cfa:	f000 fd3f 	bl	800777c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006d34 <prvAddNewTaskToReadyList+0xc0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00e      	beq.n	8006d24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <prvAddNewTaskToReadyList+0xbc>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d207      	bcs.n	8006d24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d14:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006d16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	200006e4 	.word	0x200006e4
 8006d30:	200005e4 	.word	0x200005e4
 8006d34:	200006f0 	.word	0x200006f0
 8006d38:	20000700 	.word	0x20000700
 8006d3c:	200006ec 	.word	0x200006ec
 8006d40:	200005e8 	.word	0x200005e8
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d018      	beq.n	8006d8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d5a:	4b14      	ldr	r3, [pc, #80]	@ (8006dac <vTaskDelay+0x64>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <vTaskDelay+0x32>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60bb      	str	r3, [r7, #8]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d7a:	f000 f87d 	bl	8006e78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d7e:	2100      	movs	r1, #0
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fb2f 	bl	80073e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d86:	f000 f885 	bl	8006e94 <xTaskResumeAll>
 8006d8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d107      	bne.n	8006da2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d92:	4b07      	ldr	r3, [pc, #28]	@ (8006db0 <vTaskDelay+0x68>)
 8006d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2000070c 	.word	0x2000070c
 8006db0:	e000ed04 	.word	0xe000ed04

08006db4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	@ 0x28
 8006db8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	1d39      	adds	r1, r7, #4
 8006dc6:	f107 0308 	add.w	r3, r7, #8
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7f9 feae 	bl	8000b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	9202      	str	r2, [sp, #8]
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	2300      	movs	r3, #0
 8006de0:	460a      	mov	r2, r1
 8006de2:	491f      	ldr	r1, [pc, #124]	@ (8006e60 <vTaskStartScheduler+0xac>)
 8006de4:	481f      	ldr	r0, [pc, #124]	@ (8006e64 <vTaskStartScheduler+0xb0>)
 8006de6:	f7ff fe17 	bl	8006a18 <xTaskCreateStatic>
 8006dea:	4603      	mov	r3, r0
 8006dec:	4a1e      	ldr	r2, [pc, #120]	@ (8006e68 <vTaskStartScheduler+0xb4>)
 8006dee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006df0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e68 <vTaskStartScheduler+0xb4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	e001      	b.n	8006e02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d116      	bne.n	8006e36 <vTaskStartScheduler+0x82>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	613b      	str	r3, [r7, #16]
}
 8006e1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e1c:	4b13      	ldr	r3, [pc, #76]	@ (8006e6c <vTaskStartScheduler+0xb8>)
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e24:	4b12      	ldr	r3, [pc, #72]	@ (8006e70 <vTaskStartScheduler+0xbc>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e2a:	4b12      	ldr	r3, [pc, #72]	@ (8006e74 <vTaskStartScheduler+0xc0>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e30:	f000 fbce 	bl	80075d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e34:	e00f      	b.n	8006e56 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d10b      	bne.n	8006e56 <vTaskStartScheduler+0xa2>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60fb      	str	r3, [r7, #12]
}
 8006e50:	bf00      	nop
 8006e52:	bf00      	nop
 8006e54:	e7fd      	b.n	8006e52 <vTaskStartScheduler+0x9e>
}
 8006e56:	bf00      	nop
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	08007e1c 	.word	0x08007e1c
 8006e64:	080071fd 	.word	0x080071fd
 8006e68:	20000708 	.word	0x20000708
 8006e6c:	20000704 	.word	0x20000704
 8006e70:	200006f0 	.word	0x200006f0
 8006e74:	200006e8 	.word	0x200006e8

08006e78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e7c:	4b04      	ldr	r3, [pc, #16]	@ (8006e90 <vTaskSuspendAll+0x18>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	4a03      	ldr	r2, [pc, #12]	@ (8006e90 <vTaskSuspendAll+0x18>)
 8006e84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e86:	bf00      	nop
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	2000070c 	.word	0x2000070c

08006e94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ea2:	4b42      	ldr	r3, [pc, #264]	@ (8006fac <xTaskResumeAll+0x118>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <xTaskResumeAll+0x2e>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	603b      	str	r3, [r7, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ec2:	f000 fc29 	bl	8007718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ec6:	4b39      	ldr	r3, [pc, #228]	@ (8006fac <xTaskResumeAll+0x118>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	4a37      	ldr	r2, [pc, #220]	@ (8006fac <xTaskResumeAll+0x118>)
 8006ece:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed0:	4b36      	ldr	r3, [pc, #216]	@ (8006fac <xTaskResumeAll+0x118>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d161      	bne.n	8006f9c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ed8:	4b35      	ldr	r3, [pc, #212]	@ (8006fb0 <xTaskResumeAll+0x11c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d05d      	beq.n	8006f9c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ee0:	e02e      	b.n	8006f40 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee2:	4b34      	ldr	r3, [pc, #208]	@ (8006fb4 <xTaskResumeAll+0x120>)
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3318      	adds	r3, #24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff fd68 	bl	80069c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fd63 	bl	80069c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f02:	2201      	movs	r2, #1
 8006f04:	409a      	lsls	r2, r3
 8006f06:	4b2c      	ldr	r3, [pc, #176]	@ (8006fb8 <xTaskResumeAll+0x124>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb8 <xTaskResumeAll+0x124>)
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4a27      	ldr	r2, [pc, #156]	@ (8006fbc <xTaskResumeAll+0x128>)
 8006f1e:	441a      	add	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f7ff fcef 	bl	800690a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f30:	4b23      	ldr	r3, [pc, #140]	@ (8006fc0 <xTaskResumeAll+0x12c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d302      	bcc.n	8006f40 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f3a:	4b22      	ldr	r3, [pc, #136]	@ (8006fc4 <xTaskResumeAll+0x130>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f40:	4b1c      	ldr	r3, [pc, #112]	@ (8006fb4 <xTaskResumeAll+0x120>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1cc      	bne.n	8006ee2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f4e:	f000 fa0b 	bl	8007368 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f52:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc8 <xTaskResumeAll+0x134>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d010      	beq.n	8006f80 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f5e:	f000 f837 	bl	8006fd0 <xTaskIncrementTick>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f68:	4b16      	ldr	r3, [pc, #88]	@ (8006fc4 <xTaskResumeAll+0x130>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f1      	bne.n	8006f5e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f7a:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <xTaskResumeAll+0x134>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f80:	4b10      	ldr	r3, [pc, #64]	@ (8006fc4 <xTaskResumeAll+0x130>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d009      	beq.n	8006f9c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fcc <xTaskResumeAll+0x138>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f9c:	f000 fbee 	bl	800777c <vPortExitCritical>

	return xAlreadyYielded;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	2000070c 	.word	0x2000070c
 8006fb0:	200006e4 	.word	0x200006e4
 8006fb4:	200006a4 	.word	0x200006a4
 8006fb8:	200006ec 	.word	0x200006ec
 8006fbc:	200005e8 	.word	0x200005e8
 8006fc0:	200005e4 	.word	0x200005e4
 8006fc4:	200006f8 	.word	0x200006f8
 8006fc8:	200006f4 	.word	0x200006f4
 8006fcc:	e000ed04 	.word	0xe000ed04

08006fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fda:	4b4f      	ldr	r3, [pc, #316]	@ (8007118 <xTaskIncrementTick+0x148>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f040 808f 	bne.w	8007102 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fe4:	4b4d      	ldr	r3, [pc, #308]	@ (800711c <xTaskIncrementTick+0x14c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fec:	4a4b      	ldr	r2, [pc, #300]	@ (800711c <xTaskIncrementTick+0x14c>)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d121      	bne.n	800703c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ff8:	4b49      	ldr	r3, [pc, #292]	@ (8007120 <xTaskIncrementTick+0x150>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00b      	beq.n	800701a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	603b      	str	r3, [r7, #0]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <xTaskIncrementTick+0x46>
 800701a:	4b41      	ldr	r3, [pc, #260]	@ (8007120 <xTaskIncrementTick+0x150>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	4b40      	ldr	r3, [pc, #256]	@ (8007124 <xTaskIncrementTick+0x154>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a3e      	ldr	r2, [pc, #248]	@ (8007120 <xTaskIncrementTick+0x150>)
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	4a3e      	ldr	r2, [pc, #248]	@ (8007124 <xTaskIncrementTick+0x154>)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	4b3e      	ldr	r3, [pc, #248]	@ (8007128 <xTaskIncrementTick+0x158>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3301      	adds	r3, #1
 8007034:	4a3c      	ldr	r2, [pc, #240]	@ (8007128 <xTaskIncrementTick+0x158>)
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	f000 f996 	bl	8007368 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800703c:	4b3b      	ldr	r3, [pc, #236]	@ (800712c <xTaskIncrementTick+0x15c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	429a      	cmp	r2, r3
 8007044:	d348      	bcc.n	80070d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007046:	4b36      	ldr	r3, [pc, #216]	@ (8007120 <xTaskIncrementTick+0x150>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007050:	4b36      	ldr	r3, [pc, #216]	@ (800712c <xTaskIncrementTick+0x15c>)
 8007052:	f04f 32ff 	mov.w	r2, #4294967295
 8007056:	601a      	str	r2, [r3, #0]
					break;
 8007058:	e03e      	b.n	80070d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800705a:	4b31      	ldr	r3, [pc, #196]	@ (8007120 <xTaskIncrementTick+0x150>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d203      	bcs.n	800707a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007072:	4a2e      	ldr	r2, [pc, #184]	@ (800712c <xTaskIncrementTick+0x15c>)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007078:	e02e      	b.n	80070d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	3304      	adds	r3, #4
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff fca0 	bl	80069c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	3318      	adds	r3, #24
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fc97 	bl	80069c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709a:	2201      	movs	r2, #1
 800709c:	409a      	lsls	r2, r3
 800709e:	4b24      	ldr	r3, [pc, #144]	@ (8007130 <xTaskIncrementTick+0x160>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	4a22      	ldr	r2, [pc, #136]	@ (8007130 <xTaskIncrementTick+0x160>)
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ac:	4613      	mov	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007134 <xTaskIncrementTick+0x164>)
 80070b6:	441a      	add	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3304      	adds	r3, #4
 80070bc:	4619      	mov	r1, r3
 80070be:	4610      	mov	r0, r2
 80070c0:	f7ff fc23 	bl	800690a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007138 <xTaskIncrementTick+0x168>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d3b9      	bcc.n	8007046 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80070d2:	2301      	movs	r3, #1
 80070d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070d6:	e7b6      	b.n	8007046 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070d8:	4b17      	ldr	r3, [pc, #92]	@ (8007138 <xTaskIncrementTick+0x168>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070de:	4915      	ldr	r1, [pc, #84]	@ (8007134 <xTaskIncrementTick+0x164>)
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d901      	bls.n	80070f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070f0:	2301      	movs	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070f4:	4b11      	ldr	r3, [pc, #68]	@ (800713c <xTaskIncrementTick+0x16c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070fc:	2301      	movs	r3, #1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e004      	b.n	800710c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007102:	4b0f      	ldr	r3, [pc, #60]	@ (8007140 <xTaskIncrementTick+0x170>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	4a0d      	ldr	r2, [pc, #52]	@ (8007140 <xTaskIncrementTick+0x170>)
 800710a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800710c:	697b      	ldr	r3, [r7, #20]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	2000070c 	.word	0x2000070c
 800711c:	200006e8 	.word	0x200006e8
 8007120:	2000069c 	.word	0x2000069c
 8007124:	200006a0 	.word	0x200006a0
 8007128:	200006fc 	.word	0x200006fc
 800712c:	20000704 	.word	0x20000704
 8007130:	200006ec 	.word	0x200006ec
 8007134:	200005e8 	.word	0x200005e8
 8007138:	200005e4 	.word	0x200005e4
 800713c:	200006f8 	.word	0x200006f8
 8007140:	200006f4 	.word	0x200006f4

08007144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800714a:	4b27      	ldr	r3, [pc, #156]	@ (80071e8 <vTaskSwitchContext+0xa4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007152:	4b26      	ldr	r3, [pc, #152]	@ (80071ec <vTaskSwitchContext+0xa8>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007158:	e040      	b.n	80071dc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800715a:	4b24      	ldr	r3, [pc, #144]	@ (80071ec <vTaskSwitchContext+0xa8>)
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007160:	4b23      	ldr	r3, [pc, #140]	@ (80071f0 <vTaskSwitchContext+0xac>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	fab3 f383 	clz	r3, r3
 800716c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800716e:	7afb      	ldrb	r3, [r7, #11]
 8007170:	f1c3 031f 	rsb	r3, r3, #31
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	491f      	ldr	r1, [pc, #124]	@ (80071f4 <vTaskSwitchContext+0xb0>)
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	440b      	add	r3, r1
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10b      	bne.n	80071a2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	e7fd      	b.n	800719e <vTaskSwitchContext+0x5a>
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4a11      	ldr	r2, [pc, #68]	@ (80071f4 <vTaskSwitchContext+0xb0>)
 80071ae:	4413      	add	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	3308      	adds	r3, #8
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d104      	bne.n	80071d2 <vTaskSwitchContext+0x8e>
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4a07      	ldr	r2, [pc, #28]	@ (80071f8 <vTaskSwitchContext+0xb4>)
 80071da:	6013      	str	r3, [r2, #0]
}
 80071dc:	bf00      	nop
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	2000070c 	.word	0x2000070c
 80071ec:	200006f8 	.word	0x200006f8
 80071f0:	200006ec 	.word	0x200006ec
 80071f4:	200005e8 	.word	0x200005e8
 80071f8:	200005e4 	.word	0x200005e4

080071fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007204:	f000 f852 	bl	80072ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007208:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <prvIdleTask+0x28>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d9f9      	bls.n	8007204 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <prvIdleTask+0x2c>)
 8007212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007220:	e7f0      	b.n	8007204 <prvIdleTask+0x8>
 8007222:	bf00      	nop
 8007224:	200005e8 	.word	0x200005e8
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007232:	2300      	movs	r3, #0
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	e00c      	b.n	8007252 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4a12      	ldr	r2, [pc, #72]	@ (800728c <prvInitialiseTaskLists+0x60>)
 8007244:	4413      	add	r3, r2
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fb32 	bl	80068b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3301      	adds	r3, #1
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d9ef      	bls.n	8007238 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007258:	480d      	ldr	r0, [pc, #52]	@ (8007290 <prvInitialiseTaskLists+0x64>)
 800725a:	f7ff fb29 	bl	80068b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800725e:	480d      	ldr	r0, [pc, #52]	@ (8007294 <prvInitialiseTaskLists+0x68>)
 8007260:	f7ff fb26 	bl	80068b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007264:	480c      	ldr	r0, [pc, #48]	@ (8007298 <prvInitialiseTaskLists+0x6c>)
 8007266:	f7ff fb23 	bl	80068b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800726a:	480c      	ldr	r0, [pc, #48]	@ (800729c <prvInitialiseTaskLists+0x70>)
 800726c:	f7ff fb20 	bl	80068b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007270:	480b      	ldr	r0, [pc, #44]	@ (80072a0 <prvInitialiseTaskLists+0x74>)
 8007272:	f7ff fb1d 	bl	80068b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <prvInitialiseTaskLists+0x78>)
 8007278:	4a05      	ldr	r2, [pc, #20]	@ (8007290 <prvInitialiseTaskLists+0x64>)
 800727a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <prvInitialiseTaskLists+0x7c>)
 800727e:	4a05      	ldr	r2, [pc, #20]	@ (8007294 <prvInitialiseTaskLists+0x68>)
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	200005e8 	.word	0x200005e8
 8007290:	20000674 	.word	0x20000674
 8007294:	20000688 	.word	0x20000688
 8007298:	200006a4 	.word	0x200006a4
 800729c:	200006b8 	.word	0x200006b8
 80072a0:	200006d0 	.word	0x200006d0
 80072a4:	2000069c 	.word	0x2000069c
 80072a8:	200006a0 	.word	0x200006a0

080072ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072b2:	e019      	b.n	80072e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072b4:	f000 fa30 	bl	8007718 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b8:	4b10      	ldr	r3, [pc, #64]	@ (80072fc <prvCheckTasksWaitingTermination+0x50>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff fb7d 	bl	80069c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <prvCheckTasksWaitingTermination+0x54>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007300 <prvCheckTasksWaitingTermination+0x54>)
 80072d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3b01      	subs	r3, #1
 80072da:	4a0a      	ldr	r2, [pc, #40]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072de:	f000 fa4d 	bl	800777c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f810 	bl	8007308 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072e8:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <prvCheckTasksWaitingTermination+0x58>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e1      	bne.n	80072b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072f0:	bf00      	nop
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	200006b8 	.word	0x200006b8
 8007300:	200006e4 	.word	0x200006e4
 8007304:	200006cc 	.word	0x200006cc

08007308 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007316:	2b00      	cmp	r3, #0
 8007318:	d108      	bne.n	800732c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fba8 	bl	8007a74 <vPortFree>
				vPortFree( pxTCB );
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fba5 	bl	8007a74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800732a:	e019      	b.n	8007360 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007332:	2b01      	cmp	r3, #1
 8007334:	d103      	bne.n	800733e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fb9c 	bl	8007a74 <vPortFree>
	}
 800733c:	e010      	b.n	8007360 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007344:	2b02      	cmp	r3, #2
 8007346:	d00b      	beq.n	8007360 <prvDeleteTCB+0x58>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	60fb      	str	r3, [r7, #12]
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <prvDeleteTCB+0x54>
	}
 8007360:	bf00      	nop
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800736e:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <prvResetNextTaskUnblockTime+0x38>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <prvResetNextTaskUnblockTime+0x3c>)
 800737a:	f04f 32ff 	mov.w	r2, #4294967295
 800737e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007380:	e008      	b.n	8007394 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007382:	4b07      	ldr	r3, [pc, #28]	@ (80073a0 <prvResetNextTaskUnblockTime+0x38>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4a04      	ldr	r2, [pc, #16]	@ (80073a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	2000069c 	.word	0x2000069c
 80073a4:	20000704 	.word	0x20000704

080073a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073ae:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <xTaskGetSchedulerState+0x34>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073b6:	2301      	movs	r3, #1
 80073b8:	607b      	str	r3, [r7, #4]
 80073ba:	e008      	b.n	80073ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073bc:	4b08      	ldr	r3, [pc, #32]	@ (80073e0 <xTaskGetSchedulerState+0x38>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073c4:	2302      	movs	r3, #2
 80073c6:	607b      	str	r3, [r7, #4]
 80073c8:	e001      	b.n	80073ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073ca:	2300      	movs	r3, #0
 80073cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073ce:	687b      	ldr	r3, [r7, #4]
	}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	200006f0 	.word	0x200006f0
 80073e0:	2000070c 	.word	0x2000070c

080073e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ee:	4b29      	ldr	r3, [pc, #164]	@ (8007494 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f4:	4b28      	ldr	r3, [pc, #160]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3304      	adds	r3, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fae2 	bl	80069c4 <uxListRemove>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10b      	bne.n	800741e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007406:	4b24      	ldr	r3, [pc, #144]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740c:	2201      	movs	r2, #1
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43da      	mvns	r2, r3
 8007414:	4b21      	ldr	r3, [pc, #132]	@ (800749c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4013      	ands	r3, r2
 800741a:	4a20      	ldr	r2, [pc, #128]	@ (800749c <prvAddCurrentTaskToDelayedList+0xb8>)
 800741c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007424:	d10a      	bne.n	800743c <prvAddCurrentTaskToDelayedList+0x58>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742c:	4b1a      	ldr	r3, [pc, #104]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	481a      	ldr	r0, [pc, #104]	@ (80074a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007436:	f7ff fa68 	bl	800690a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800743a:	e026      	b.n	800748a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007444:	4b14      	ldr	r3, [pc, #80]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	429a      	cmp	r2, r3
 8007452:	d209      	bcs.n	8007468 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007454:	4b13      	ldr	r3, [pc, #76]	@ (80074a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b0f      	ldr	r3, [pc, #60]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3304      	adds	r3, #4
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f7ff fa76 	bl	8006952 <vListInsert>
}
 8007466:	e010      	b.n	800748a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007468:	4b0f      	ldr	r3, [pc, #60]	@ (80074a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xb4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3304      	adds	r3, #4
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f7ff fa6c 	bl	8006952 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800747a:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	429a      	cmp	r2, r3
 8007482:	d202      	bcs.n	800748a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007484:	4a09      	ldr	r2, [pc, #36]	@ (80074ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6013      	str	r3, [r2, #0]
}
 800748a:	bf00      	nop
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200006e8 	.word	0x200006e8
 8007498:	200005e4 	.word	0x200005e4
 800749c:	200006ec 	.word	0x200006ec
 80074a0:	200006d0 	.word	0x200006d0
 80074a4:	200006a0 	.word	0x200006a0
 80074a8:	2000069c 	.word	0x2000069c
 80074ac:	20000704 	.word	0x20000704

080074b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3b04      	subs	r3, #4
 80074c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3b04      	subs	r3, #4
 80074ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f023 0201 	bic.w	r2, r3, #1
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3b04      	subs	r3, #4
 80074de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007514 <pxPortInitialiseStack+0x64>)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3b14      	subs	r3, #20
 80074ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3b04      	subs	r3, #4
 80074f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f06f 0202 	mvn.w	r2, #2
 80074fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3b20      	subs	r3, #32
 8007504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007506:	68fb      	ldr	r3, [r7, #12]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	08007519 	.word	0x08007519

08007518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007522:	4b13      	ldr	r3, [pc, #76]	@ (8007570 <prvTaskExitError+0x58>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752a:	d00b      	beq.n	8007544 <prvTaskExitError+0x2c>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60fb      	str	r3, [r7, #12]
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <prvTaskExitError+0x28>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60bb      	str	r3, [r7, #8]
}
 8007556:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007558:	bf00      	nop
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0fc      	beq.n	800755a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	20000010 	.word	0x20000010
	...

08007580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007580:	4b07      	ldr	r3, [pc, #28]	@ (80075a0 <pxCurrentTCBConst2>)
 8007582:	6819      	ldr	r1, [r3, #0]
 8007584:	6808      	ldr	r0, [r1, #0]
 8007586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	f380 8809 	msr	PSP, r0
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f04f 0000 	mov.w	r0, #0
 8007596:	f380 8811 	msr	BASEPRI, r0
 800759a:	4770      	bx	lr
 800759c:	f3af 8000 	nop.w

080075a0 <pxCurrentTCBConst2>:
 80075a0:	200005e4 	.word	0x200005e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop

080075a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075a8:	4808      	ldr	r0, [pc, #32]	@ (80075cc <prvPortStartFirstTask+0x24>)
 80075aa:	6800      	ldr	r0, [r0, #0]
 80075ac:	6800      	ldr	r0, [r0, #0]
 80075ae:	f380 8808 	msr	MSP, r0
 80075b2:	f04f 0000 	mov.w	r0, #0
 80075b6:	f380 8814 	msr	CONTROL, r0
 80075ba:	b662      	cpsie	i
 80075bc:	b661      	cpsie	f
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	df00      	svc	0
 80075c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075ca:	bf00      	nop
 80075cc:	e000ed08 	.word	0xe000ed08

080075d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075d6:	4b47      	ldr	r3, [pc, #284]	@ (80076f4 <xPortStartScheduler+0x124>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a47      	ldr	r2, [pc, #284]	@ (80076f8 <xPortStartScheduler+0x128>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d10b      	bne.n	80075f8 <xPortStartScheduler+0x28>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	613b      	str	r3, [r7, #16]
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	e7fd      	b.n	80075f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075f8:	4b3e      	ldr	r3, [pc, #248]	@ (80076f4 <xPortStartScheduler+0x124>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a3f      	ldr	r2, [pc, #252]	@ (80076fc <xPortStartScheduler+0x12c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10b      	bne.n	800761a <xPortStartScheduler+0x4a>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60fb      	str	r3, [r7, #12]
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800761a:	4b39      	ldr	r3, [pc, #228]	@ (8007700 <xPortStartScheduler+0x130>)
 800761c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b2db      	uxtb	r3, r3
 8007624:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	22ff      	movs	r2, #255	@ 0xff
 800762a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800763c:	b2da      	uxtb	r2, r3
 800763e:	4b31      	ldr	r3, [pc, #196]	@ (8007704 <xPortStartScheduler+0x134>)
 8007640:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007642:	4b31      	ldr	r3, [pc, #196]	@ (8007708 <xPortStartScheduler+0x138>)
 8007644:	2207      	movs	r2, #7
 8007646:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007648:	e009      	b.n	800765e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800764a:	4b2f      	ldr	r3, [pc, #188]	@ (8007708 <xPortStartScheduler+0x138>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3b01      	subs	r3, #1
 8007650:	4a2d      	ldr	r2, [pc, #180]	@ (8007708 <xPortStartScheduler+0x138>)
 8007652:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007654:	78fb      	ldrb	r3, [r7, #3]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	b2db      	uxtb	r3, r3
 800765c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007666:	2b80      	cmp	r3, #128	@ 0x80
 8007668:	d0ef      	beq.n	800764a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800766a:	4b27      	ldr	r3, [pc, #156]	@ (8007708 <xPortStartScheduler+0x138>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f1c3 0307 	rsb	r3, r3, #7
 8007672:	2b04      	cmp	r3, #4
 8007674:	d00b      	beq.n	800768e <xPortStartScheduler+0xbe>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	60bb      	str	r3, [r7, #8]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800768e:	4b1e      	ldr	r3, [pc, #120]	@ (8007708 <xPortStartScheduler+0x138>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	4a1c      	ldr	r2, [pc, #112]	@ (8007708 <xPortStartScheduler+0x138>)
 8007696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007698:	4b1b      	ldr	r3, [pc, #108]	@ (8007708 <xPortStartScheduler+0x138>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076a0:	4a19      	ldr	r2, [pc, #100]	@ (8007708 <xPortStartScheduler+0x138>)
 80076a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076ac:	4b17      	ldr	r3, [pc, #92]	@ (800770c <xPortStartScheduler+0x13c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a16      	ldr	r2, [pc, #88]	@ (800770c <xPortStartScheduler+0x13c>)
 80076b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80076b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076b8:	4b14      	ldr	r3, [pc, #80]	@ (800770c <xPortStartScheduler+0x13c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a13      	ldr	r2, [pc, #76]	@ (800770c <xPortStartScheduler+0x13c>)
 80076be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80076c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076c4:	f000 f8da 	bl	800787c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076c8:	4b11      	ldr	r3, [pc, #68]	@ (8007710 <xPortStartScheduler+0x140>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076ce:	f000 f8f9 	bl	80078c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076d2:	4b10      	ldr	r3, [pc, #64]	@ (8007714 <xPortStartScheduler+0x144>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007714 <xPortStartScheduler+0x144>)
 80076d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80076dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076de:	f7ff ff63 	bl	80075a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076e2:	f7ff fd2f 	bl	8007144 <vTaskSwitchContext>
	prvTaskExitError();
 80076e6:	f7ff ff17 	bl	8007518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	e000ed00 	.word	0xe000ed00
 80076f8:	410fc271 	.word	0x410fc271
 80076fc:	410fc270 	.word	0x410fc270
 8007700:	e000e400 	.word	0xe000e400
 8007704:	20000710 	.word	0x20000710
 8007708:	20000714 	.word	0x20000714
 800770c:	e000ed20 	.word	0xe000ed20
 8007710:	20000010 	.word	0x20000010
 8007714:	e000ef34 	.word	0xe000ef34

08007718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	607b      	str	r3, [r7, #4]
}
 8007730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007732:	4b10      	ldr	r3, [pc, #64]	@ (8007774 <vPortEnterCritical+0x5c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3301      	adds	r3, #1
 8007738:	4a0e      	ldr	r2, [pc, #56]	@ (8007774 <vPortEnterCritical+0x5c>)
 800773a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800773c:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <vPortEnterCritical+0x5c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d110      	bne.n	8007766 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007744:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <vPortEnterCritical+0x60>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <vPortEnterCritical+0x4e>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	603b      	str	r3, [r7, #0]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <vPortEnterCritical+0x4a>
	}
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000010 	.word	0x20000010
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007782:	4b12      	ldr	r3, [pc, #72]	@ (80077cc <vPortExitCritical+0x50>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10b      	bne.n	80077a2 <vPortExitCritical+0x26>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	607b      	str	r3, [r7, #4]
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	e7fd      	b.n	800779e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077a2:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <vPortExitCritical+0x50>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	4a08      	ldr	r2, [pc, #32]	@ (80077cc <vPortExitCritical+0x50>)
 80077aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077ac:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <vPortExitCritical+0x50>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d105      	bne.n	80077c0 <vPortExitCritical+0x44>
 80077b4:	2300      	movs	r3, #0
 80077b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	20000010 	.word	0x20000010

080077d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077d0:	f3ef 8009 	mrs	r0, PSP
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	4b15      	ldr	r3, [pc, #84]	@ (8007830 <pxCurrentTCBConst>)
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	f01e 0f10 	tst.w	lr, #16
 80077e0:	bf08      	it	eq
 80077e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	6010      	str	r0, [r2, #0]
 80077ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80077f4:	f380 8811 	msr	BASEPRI, r0
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f7ff fca0 	bl	8007144 <vTaskSwitchContext>
 8007804:	f04f 0000 	mov.w	r0, #0
 8007808:	f380 8811 	msr	BASEPRI, r0
 800780c:	bc09      	pop	{r0, r3}
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	6808      	ldr	r0, [r1, #0]
 8007812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007816:	f01e 0f10 	tst.w	lr, #16
 800781a:	bf08      	it	eq
 800781c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007820:	f380 8809 	msr	PSP, r0
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	f3af 8000 	nop.w

08007830 <pxCurrentTCBConst>:
 8007830:	200005e4 	.word	0x200005e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007834:	bf00      	nop
 8007836:	bf00      	nop

08007838 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	607b      	str	r3, [r7, #4]
}
 8007850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007852:	f7ff fbbd 	bl	8006fd0 <xTaskIncrementTick>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800785c:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <xPortSysTickHandler+0x40>)
 800785e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	2300      	movs	r3, #0
 8007866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	f383 8811 	msr	BASEPRI, r3
}
 800786e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007870:	bf00      	nop
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	e000ed04 	.word	0xe000ed04

0800787c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007880:	4b0b      	ldr	r3, [pc, #44]	@ (80078b0 <vPortSetupTimerInterrupt+0x34>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007886:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <vPortSetupTimerInterrupt+0x38>)
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800788c:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <vPortSetupTimerInterrupt+0x3c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0a      	ldr	r2, [pc, #40]	@ (80078bc <vPortSetupTimerInterrupt+0x40>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	099b      	lsrs	r3, r3, #6
 8007898:	4a09      	ldr	r2, [pc, #36]	@ (80078c0 <vPortSetupTimerInterrupt+0x44>)
 800789a:	3b01      	subs	r3, #1
 800789c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800789e:	4b04      	ldr	r3, [pc, #16]	@ (80078b0 <vPortSetupTimerInterrupt+0x34>)
 80078a0:	2207      	movs	r2, #7
 80078a2:	601a      	str	r2, [r3, #0]
}
 80078a4:	bf00      	nop
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	e000e010 	.word	0xe000e010
 80078b4:	e000e018 	.word	0xe000e018
 80078b8:	20000004 	.word	0x20000004
 80078bc:	10624dd3 	.word	0x10624dd3
 80078c0:	e000e014 	.word	0xe000e014

080078c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80078d4 <vPortEnableVFP+0x10>
 80078c8:	6801      	ldr	r1, [r0, #0]
 80078ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80078ce:	6001      	str	r1, [r0, #0]
 80078d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078d2:	bf00      	nop
 80078d4:	e000ed88 	.word	0xe000ed88

080078d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	@ 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078e4:	f7ff fac8 	bl	8006e78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078e8:	4b5c      	ldr	r3, [pc, #368]	@ (8007a5c <pvPortMalloc+0x184>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078f0:	f000 f924 	bl	8007b3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007a60 <pvPortMalloc+0x188>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 8095 	bne.w	8007a2c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01e      	beq.n	8007946 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007908:	2208      	movs	r2, #8
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	2b00      	cmp	r3, #0
 8007918:	d015      	beq.n	8007946 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f023 0307 	bic.w	r3, r3, #7
 8007920:	3308      	adds	r3, #8
 8007922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <pvPortMalloc+0x6e>
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	617b      	str	r3, [r7, #20]
}
 8007940:	bf00      	nop
 8007942:	bf00      	nop
 8007944:	e7fd      	b.n	8007942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d06f      	beq.n	8007a2c <pvPortMalloc+0x154>
 800794c:	4b45      	ldr	r3, [pc, #276]	@ (8007a64 <pvPortMalloc+0x18c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	429a      	cmp	r2, r3
 8007954:	d86a      	bhi.n	8007a2c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007956:	4b44      	ldr	r3, [pc, #272]	@ (8007a68 <pvPortMalloc+0x190>)
 8007958:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800795a:	4b43      	ldr	r3, [pc, #268]	@ (8007a68 <pvPortMalloc+0x190>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007960:	e004      	b.n	800796c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d903      	bls.n	800797e <pvPortMalloc+0xa6>
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f1      	bne.n	8007962 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800797e:	4b37      	ldr	r3, [pc, #220]	@ (8007a5c <pvPortMalloc+0x184>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007984:	429a      	cmp	r2, r3
 8007986:	d051      	beq.n	8007a2c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2208      	movs	r2, #8
 800798e:	4413      	add	r3, r2
 8007990:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	1ad2      	subs	r2, r2, r3
 80079a2:	2308      	movs	r3, #8
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d920      	bls.n	80079ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4413      	add	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00b      	beq.n	80079d4 <pvPortMalloc+0xfc>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	613b      	str	r3, [r7, #16]
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	e7fd      	b.n	80079d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079e6:	69b8      	ldr	r0, [r7, #24]
 80079e8:	f000 f90a 	bl	8007c00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007a64 <pvPortMalloc+0x18c>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007a64 <pvPortMalloc+0x18c>)
 80079f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007a64 <pvPortMalloc+0x18c>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	4b1b      	ldr	r3, [pc, #108]	@ (8007a6c <pvPortMalloc+0x194>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d203      	bcs.n	8007a0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a06:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <pvPortMalloc+0x18c>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a18      	ldr	r2, [pc, #96]	@ (8007a6c <pvPortMalloc+0x194>)
 8007a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	4b13      	ldr	r3, [pc, #76]	@ (8007a60 <pvPortMalloc+0x188>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a22:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <pvPortMalloc+0x198>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3301      	adds	r3, #1
 8007a28:	4a11      	ldr	r2, [pc, #68]	@ (8007a70 <pvPortMalloc+0x198>)
 8007a2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a2c:	f7ff fa32 	bl	8006e94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00b      	beq.n	8007a52 <pvPortMalloc+0x17a>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	60fb      	str	r3, [r7, #12]
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <pvPortMalloc+0x176>
	return pvReturn;
 8007a52:	69fb      	ldr	r3, [r7, #28]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3728      	adds	r7, #40	@ 0x28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20002f20 	.word	0x20002f20
 8007a60:	20002f34 	.word	0x20002f34
 8007a64:	20002f24 	.word	0x20002f24
 8007a68:	20002f18 	.word	0x20002f18
 8007a6c:	20002f28 	.word	0x20002f28
 8007a70:	20002f2c 	.word	0x20002f2c

08007a74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d04f      	beq.n	8007b26 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a86:	2308      	movs	r3, #8
 8007a88:	425b      	negs	r3, r3
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	4b25      	ldr	r3, [pc, #148]	@ (8007b30 <vPortFree+0xbc>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <vPortFree+0x46>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	60fb      	str	r3, [r7, #12]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <vPortFree+0x66>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60bb      	str	r3, [r7, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	e7fd      	b.n	8007ad6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	4b14      	ldr	r3, [pc, #80]	@ (8007b30 <vPortFree+0xbc>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d01e      	beq.n	8007b26 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d11a      	bne.n	8007b26 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	4b0e      	ldr	r3, [pc, #56]	@ (8007b30 <vPortFree+0xbc>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	43db      	mvns	r3, r3
 8007afa:	401a      	ands	r2, r3
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b00:	f7ff f9ba 	bl	8006e78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	4b0a      	ldr	r3, [pc, #40]	@ (8007b34 <vPortFree+0xc0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	4a09      	ldr	r2, [pc, #36]	@ (8007b34 <vPortFree+0xc0>)
 8007b10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b12:	6938      	ldr	r0, [r7, #16]
 8007b14:	f000 f874 	bl	8007c00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b18:	4b07      	ldr	r3, [pc, #28]	@ (8007b38 <vPortFree+0xc4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	4a06      	ldr	r2, [pc, #24]	@ (8007b38 <vPortFree+0xc4>)
 8007b20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b22:	f7ff f9b7 	bl	8006e94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b26:	bf00      	nop
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20002f34 	.word	0x20002f34
 8007b34:	20002f24 	.word	0x20002f24
 8007b38:	20002f30 	.word	0x20002f30

08007b3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b42:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8007b46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b48:	4b27      	ldr	r3, [pc, #156]	@ (8007be8 <prvHeapInit+0xac>)
 8007b4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f003 0307 	and.w	r3, r3, #7
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00c      	beq.n	8007b70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3307      	adds	r3, #7
 8007b5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0307 	bic.w	r3, r3, #7
 8007b62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007be8 <prvHeapInit+0xac>)
 8007b6c:	4413      	add	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b74:	4a1d      	ldr	r2, [pc, #116]	@ (8007bec <prvHeapInit+0xb0>)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bec <prvHeapInit+0xb0>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4413      	add	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b88:	2208      	movs	r2, #8
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0307 	bic.w	r3, r3, #7
 8007b96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a15      	ldr	r2, [pc, #84]	@ (8007bf0 <prvHeapInit+0xb4>)
 8007b9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b9e:	4b14      	ldr	r3, [pc, #80]	@ (8007bf0 <prvHeapInit+0xb4>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ba6:	4b12      	ldr	r3, [pc, #72]	@ (8007bf0 <prvHeapInit+0xb4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf0 <prvHeapInit+0xb4>)
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8007bf4 <prvHeapInit+0xb8>)
 8007bca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	4a09      	ldr	r2, [pc, #36]	@ (8007bf8 <prvHeapInit+0xbc>)
 8007bd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bd4:	4b09      	ldr	r3, [pc, #36]	@ (8007bfc <prvHeapInit+0xc0>)
 8007bd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007bda:	601a      	str	r2, [r3, #0]
}
 8007bdc:	bf00      	nop
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	20000718 	.word	0x20000718
 8007bec:	20002f18 	.word	0x20002f18
 8007bf0:	20002f20 	.word	0x20002f20
 8007bf4:	20002f28 	.word	0x20002f28
 8007bf8:	20002f24 	.word	0x20002f24
 8007bfc:	20002f34 	.word	0x20002f34

08007c00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c08:	4b28      	ldr	r3, [pc, #160]	@ (8007cac <prvInsertBlockIntoFreeList+0xac>)
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	e002      	b.n	8007c14 <prvInsertBlockIntoFreeList+0x14>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d8f7      	bhi.n	8007c0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	4413      	add	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d108      	bne.n	8007c42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	441a      	add	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	441a      	add	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d118      	bne.n	8007c88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b15      	ldr	r3, [pc, #84]	@ (8007cb0 <prvInsertBlockIntoFreeList+0xb0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d00d      	beq.n	8007c7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	441a      	add	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e008      	b.n	8007c90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb0 <prvInsertBlockIntoFreeList+0xb0>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	e003      	b.n	8007c90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d002      	beq.n	8007c9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c9e:	bf00      	nop
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	20002f18 	.word	0x20002f18
 8007cb0:	20002f20 	.word	0x20002f20

08007cb4 <memset>:
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d100      	bne.n	8007cbe <memset+0xa>
 8007cbc:	4770      	bx	lr
 8007cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007cc2:	e7f9      	b.n	8007cb8 <memset+0x4>

08007cc4 <__libc_init_array>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8007cfc <__libc_init_array+0x38>)
 8007cc8:	4c0d      	ldr	r4, [pc, #52]	@ (8007d00 <__libc_init_array+0x3c>)
 8007cca:	1b64      	subs	r4, r4, r5
 8007ccc:	10a4      	asrs	r4, r4, #2
 8007cce:	2600      	movs	r6, #0
 8007cd0:	42a6      	cmp	r6, r4
 8007cd2:	d109      	bne.n	8007ce8 <__libc_init_array+0x24>
 8007cd4:	4d0b      	ldr	r5, [pc, #44]	@ (8007d04 <__libc_init_array+0x40>)
 8007cd6:	4c0c      	ldr	r4, [pc, #48]	@ (8007d08 <__libc_init_array+0x44>)
 8007cd8:	f000 f818 	bl	8007d0c <_init>
 8007cdc:	1b64      	subs	r4, r4, r5
 8007cde:	10a4      	asrs	r4, r4, #2
 8007ce0:	2600      	movs	r6, #0
 8007ce2:	42a6      	cmp	r6, r4
 8007ce4:	d105      	bne.n	8007cf2 <__libc_init_array+0x2e>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cec:	4798      	blx	r3
 8007cee:	3601      	adds	r6, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__libc_init_array+0xc>
 8007cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf6:	4798      	blx	r3
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	e7f2      	b.n	8007ce2 <__libc_init_array+0x1e>
 8007cfc:	08007e74 	.word	0x08007e74
 8007d00:	08007e74 	.word	0x08007e74
 8007d04:	08007e74 	.word	0x08007e74
 8007d08:	08007e78 	.word	0x08007e78

08007d0c <_init>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr

08007d18 <_fini>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	bf00      	nop
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr
